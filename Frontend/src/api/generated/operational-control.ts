/**
 * Generated by orval v7.8.0 🍺
 * Do not edit manually.
 * TMB Control API
 * OpenAPI spec version: v1
 */
import {
  useMutation,
  useQuery
} from '@tanstack/react-query';
import type {
  DataTag,
  DefinedInitialDataOptions,
  DefinedUseQueryResult,
  MutationFunction,
  QueryClient,
  QueryFunction,
  QueryKey,
  UndefinedInitialDataOptions,
  UseMutationOptions,
  UseMutationResult,
  UseQueryOptions,
  UseQueryResult
} from '@tanstack/react-query';

import type {
  ActualControlDto,
  AddControlRevisionRequest,
  CreateActualControlRequest,
  CreateFrequencyRequest,
  CreateGroupRequest,
  CustomProblemDetails,
  OperationalControlMasterDataDto,
  UpdateActualControlRequest
} from './model';

import { customInstance } from '../customInstance';





/**
 * Ping endpoint for the Operational Control module
 * @summary Ping endpoint for the Operational Control module
 */
export const pingOperationalControl = (
    
 signal?: AbortSignal
) => {
      
      
      return customInstance<unknown>(
      {url: `/api/operational-control/ping`, method: 'GET', signal
    },
      );
    }
  

export const getPingOperationalControlQueryKey = () => {
    return [`/api/operational-control/ping`] as const;
    }

    
export const getPingOperationalControlQueryOptions = <TData = Awaited<ReturnType<typeof pingOperationalControl>>, TError = CustomProblemDetails>( options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof pingOperationalControl>>, TError, TData>>, }
) => {

const {query: queryOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getPingOperationalControlQueryKey();

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof pingOperationalControl>>> = ({ signal }) => pingOperationalControl(signal);

      

      

   return  { queryKey, queryFn, ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof pingOperationalControl>>, TError, TData> & { queryKey: DataTag<QueryKey, TData, TError> }
}

export type PingOperationalControlQueryResult = NonNullable<Awaited<ReturnType<typeof pingOperationalControl>>>
export type PingOperationalControlQueryError = CustomProblemDetails


export function usePingOperationalControl<TData = Awaited<ReturnType<typeof pingOperationalControl>>, TError = CustomProblemDetails>(
  options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof pingOperationalControl>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof pingOperationalControl>>,
          TError,
          Awaited<ReturnType<typeof pingOperationalControl>>
        > , 'initialData'
      >, }
 , queryClient?: QueryClient
  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function usePingOperationalControl<TData = Awaited<ReturnType<typeof pingOperationalControl>>, TError = CustomProblemDetails>(
  options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof pingOperationalControl>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof pingOperationalControl>>,
          TError,
          Awaited<ReturnType<typeof pingOperationalControl>>
        > , 'initialData'
      >, }
 , queryClient?: QueryClient
  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function usePingOperationalControl<TData = Awaited<ReturnType<typeof pingOperationalControl>>, TError = CustomProblemDetails>(
  options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof pingOperationalControl>>, TError, TData>>, }
 , queryClient?: QueryClient
  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
/**
 * @summary Ping endpoint for the Operational Control module
 */

export function usePingOperationalControl<TData = Awaited<ReturnType<typeof pingOperationalControl>>, TError = CustomProblemDetails>(
  options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof pingOperationalControl>>, TError, TData>>, }
 , queryClient?: QueryClient 
 ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> } {

  const queryOptions = getPingOperationalControlQueryOptions(options)

  const query = useQuery(queryOptions , queryClient) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}



/**
 * Create a new operational control
 * @summary Create actual control
 */
export const createActualControl = (
    createActualControlRequest: CreateActualControlRequest,
 signal?: AbortSignal
) => {
      
      
      return customInstance<string>(
      {url: `/api/operational-control`, method: 'POST',
      headers: {'Content-Type': 'application/json', },
      data: createActualControlRequest, signal
    },
      );
    }
  


export const getCreateActualControlMutationOptions = <TError = CustomProblemDetails,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof createActualControl>>, TError,{data: CreateActualControlRequest}, TContext>, }
): UseMutationOptions<Awaited<ReturnType<typeof createActualControl>>, TError,{data: CreateActualControlRequest}, TContext> => {
    
const mutationKey = ['createActualControl'];
const {mutation: mutationOptions} = options ?
      options.mutation && 'mutationKey' in options.mutation && options.mutation.mutationKey ?
      options
      : {...options, mutation: {...options.mutation, mutationKey}}
      : {mutation: { mutationKey, }};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof createActualControl>>, {data: CreateActualControlRequest}> = (props) => {
          const {data} = props ?? {};

          return  createActualControl(data,)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type CreateActualControlMutationResult = NonNullable<Awaited<ReturnType<typeof createActualControl>>>
    export type CreateActualControlMutationBody = CreateActualControlRequest
    export type CreateActualControlMutationError = CustomProblemDetails

    /**
 * @summary Create actual control
 */
export const useCreateActualControl = <TError = CustomProblemDetails,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof createActualControl>>, TError,{data: CreateActualControlRequest}, TContext>, }
 , queryClient?: QueryClient): UseMutationResult<
        Awaited<ReturnType<typeof createActualControl>>,
        TError,
        {data: CreateActualControlRequest},
        TContext
      > => {

      const mutationOptions = getCreateActualControlMutationOptions(options);

      return useMutation(mutationOptions , queryClient);
    }
    /**
 * Get all actual controls with their current state and recent revisions
 * @summary Get all actual controls
 */
export const getAllActualControls = (
    
 signal?: AbortSignal
) => {
      
      
      return customInstance<ActualControlDto[]>(
      {url: `/api/operational-control`, method: 'GET', signal
    },
      );
    }
  

export const getGetAllActualControlsQueryKey = () => {
    return [`/api/operational-control`] as const;
    }

    
export const getGetAllActualControlsQueryOptions = <TData = Awaited<ReturnType<typeof getAllActualControls>>, TError = CustomProblemDetails>( options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getAllActualControls>>, TError, TData>>, }
) => {

const {query: queryOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetAllActualControlsQueryKey();

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getAllActualControls>>> = ({ signal }) => getAllActualControls(signal);

      

      

   return  { queryKey, queryFn, ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getAllActualControls>>, TError, TData> & { queryKey: DataTag<QueryKey, TData, TError> }
}

export type GetAllActualControlsQueryResult = NonNullable<Awaited<ReturnType<typeof getAllActualControls>>>
export type GetAllActualControlsQueryError = CustomProblemDetails


export function useGetAllActualControls<TData = Awaited<ReturnType<typeof getAllActualControls>>, TError = CustomProblemDetails>(
  options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof getAllActualControls>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getAllActualControls>>,
          TError,
          Awaited<ReturnType<typeof getAllActualControls>>
        > , 'initialData'
      >, }
 , queryClient?: QueryClient
  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useGetAllActualControls<TData = Awaited<ReturnType<typeof getAllActualControls>>, TError = CustomProblemDetails>(
  options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getAllActualControls>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getAllActualControls>>,
          TError,
          Awaited<ReturnType<typeof getAllActualControls>>
        > , 'initialData'
      >, }
 , queryClient?: QueryClient
  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useGetAllActualControls<TData = Awaited<ReturnType<typeof getAllActualControls>>, TError = CustomProblemDetails>(
  options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getAllActualControls>>, TError, TData>>, }
 , queryClient?: QueryClient
  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
/**
 * @summary Get all actual controls
 */

export function useGetAllActualControls<TData = Awaited<ReturnType<typeof getAllActualControls>>, TError = CustomProblemDetails>(
  options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getAllActualControls>>, TError, TData>>, }
 , queryClient?: QueryClient 
 ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> } {

  const queryOptions = getGetAllActualControlsQueryOptions(options)

  const query = useQuery(queryOptions , queryClient) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}



/**
 * Delete an actual control and its revisions
 * @summary Delete actual control
 */
export const deleteActualControl = (
    id: string,
 ) => {
      
      
      return customInstance<void>(
      {url: `/api/operational-control/${id}`, method: 'DELETE'
    },
      );
    }
  


export const getDeleteActualControlMutationOptions = <TError = CustomProblemDetails,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof deleteActualControl>>, TError,{id: string}, TContext>, }
): UseMutationOptions<Awaited<ReturnType<typeof deleteActualControl>>, TError,{id: string}, TContext> => {
    
const mutationKey = ['deleteActualControl'];
const {mutation: mutationOptions} = options ?
      options.mutation && 'mutationKey' in options.mutation && options.mutation.mutationKey ?
      options
      : {...options, mutation: {...options.mutation, mutationKey}}
      : {mutation: { mutationKey, }};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof deleteActualControl>>, {id: string}> = (props) => {
          const {id} = props ?? {};

          return  deleteActualControl(id,)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type DeleteActualControlMutationResult = NonNullable<Awaited<ReturnType<typeof deleteActualControl>>>
    
    export type DeleteActualControlMutationError = CustomProblemDetails

    /**
 * @summary Delete actual control
 */
export const useDeleteActualControl = <TError = CustomProblemDetails,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof deleteActualControl>>, TError,{id: string}, TContext>, }
 , queryClient?: QueryClient): UseMutationResult<
        Awaited<ReturnType<typeof deleteActualControl>>,
        TError,
        {id: string},
        TContext
      > => {

      const mutationOptions = getDeleteActualControlMutationOptions(options);

      return useMutation(mutationOptions , queryClient);
    }
    /**
 * Get a control operation by ID
 * @summary Get operation by ID
 */
export const getControlOperationById = (
    id: string,
 signal?: AbortSignal
) => {
      
      
      return customInstance<ActualControlDto>(
      {url: `/api/operational-control/${id}`, method: 'GET', signal
    },
      );
    }
  

export const getGetControlOperationByIdQueryKey = (id: string,) => {
    return [`/api/operational-control/${id}`] as const;
    }

    
export const getGetControlOperationByIdQueryOptions = <TData = Awaited<ReturnType<typeof getControlOperationById>>, TError = CustomProblemDetails>(id: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getControlOperationById>>, TError, TData>>, }
) => {

const {query: queryOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetControlOperationByIdQueryKey(id);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getControlOperationById>>> = ({ signal }) => getControlOperationById(id, signal);

      

      

   return  { queryKey, queryFn, enabled: !!(id), ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getControlOperationById>>, TError, TData> & { queryKey: DataTag<QueryKey, TData, TError> }
}

export type GetControlOperationByIdQueryResult = NonNullable<Awaited<ReturnType<typeof getControlOperationById>>>
export type GetControlOperationByIdQueryError = CustomProblemDetails


export function useGetControlOperationById<TData = Awaited<ReturnType<typeof getControlOperationById>>, TError = CustomProblemDetails>(
 id: string, options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof getControlOperationById>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getControlOperationById>>,
          TError,
          Awaited<ReturnType<typeof getControlOperationById>>
        > , 'initialData'
      >, }
 , queryClient?: QueryClient
  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useGetControlOperationById<TData = Awaited<ReturnType<typeof getControlOperationById>>, TError = CustomProblemDetails>(
 id: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getControlOperationById>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getControlOperationById>>,
          TError,
          Awaited<ReturnType<typeof getControlOperationById>>
        > , 'initialData'
      >, }
 , queryClient?: QueryClient
  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useGetControlOperationById<TData = Awaited<ReturnType<typeof getControlOperationById>>, TError = CustomProblemDetails>(
 id: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getControlOperationById>>, TError, TData>>, }
 , queryClient?: QueryClient
  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
/**
 * @summary Get operation by ID
 */

export function useGetControlOperationById<TData = Awaited<ReturnType<typeof getControlOperationById>>, TError = CustomProblemDetails>(
 id: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getControlOperationById>>, TError, TData>>, }
 , queryClient?: QueryClient 
 ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> } {

  const queryOptions = getGetControlOperationByIdQueryOptions(id,options)

  const query = useQuery(queryOptions , queryClient) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}



/**
 * Update a current operational control by ID
 * @summary Update actual control
 */
export const updateActualControl = (
    id: string,
    updateActualControlRequest: UpdateActualControlRequest,
 ) => {
      
      
      return customInstance<void>(
      {url: `/api/operational-control/${id}`, method: 'PUT',
      headers: {'Content-Type': 'application/json', },
      data: updateActualControlRequest
    },
      );
    }
  


export const getUpdateActualControlMutationOptions = <TError = CustomProblemDetails,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof updateActualControl>>, TError,{id: string;data: UpdateActualControlRequest}, TContext>, }
): UseMutationOptions<Awaited<ReturnType<typeof updateActualControl>>, TError,{id: string;data: UpdateActualControlRequest}, TContext> => {
    
const mutationKey = ['updateActualControl'];
const {mutation: mutationOptions} = options ?
      options.mutation && 'mutationKey' in options.mutation && options.mutation.mutationKey ?
      options
      : {...options, mutation: {...options.mutation, mutationKey}}
      : {mutation: { mutationKey, }};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof updateActualControl>>, {id: string;data: UpdateActualControlRequest}> = (props) => {
          const {id,data} = props ?? {};

          return  updateActualControl(id,data,)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type UpdateActualControlMutationResult = NonNullable<Awaited<ReturnType<typeof updateActualControl>>>
    export type UpdateActualControlMutationBody = UpdateActualControlRequest
    export type UpdateActualControlMutationError = CustomProblemDetails

    /**
 * @summary Update actual control
 */
export const useUpdateActualControl = <TError = CustomProblemDetails,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof updateActualControl>>, TError,{id: string;data: UpdateActualControlRequest}, TContext>, }
 , queryClient?: QueryClient): UseMutationResult<
        Awaited<ReturnType<typeof updateActualControl>>,
        TError,
        {id: string;data: UpdateActualControlRequest},
        TContext
      > => {

      const mutationOptions = getUpdateActualControlMutationOptions(options);

      return useMutation(mutationOptions , queryClient);
    }
    /**
 * Finish an actual control and add a revision
 * @summary Finish actual control
 */
export const finishActualControl = (
    id: string,
    addControlRevisionRequest: AddControlRevisionRequest,
 ) => {
      
      
      return customInstance<void>(
      {url: `/api/operational-control/${id}/finish`, method: 'PATCH',
      headers: {'Content-Type': 'application/json', },
      data: addControlRevisionRequest
    },
      );
    }
  


export const getFinishActualControlMutationOptions = <TError = CustomProblemDetails,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof finishActualControl>>, TError,{id: string;data: AddControlRevisionRequest}, TContext>, }
): UseMutationOptions<Awaited<ReturnType<typeof finishActualControl>>, TError,{id: string;data: AddControlRevisionRequest}, TContext> => {
    
const mutationKey = ['finishActualControl'];
const {mutation: mutationOptions} = options ?
      options.mutation && 'mutationKey' in options.mutation && options.mutation.mutationKey ?
      options
      : {...options, mutation: {...options.mutation, mutationKey}}
      : {mutation: { mutationKey, }};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof finishActualControl>>, {id: string;data: AddControlRevisionRequest}> = (props) => {
          const {id,data} = props ?? {};

          return  finishActualControl(id,data,)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type FinishActualControlMutationResult = NonNullable<Awaited<ReturnType<typeof finishActualControl>>>
    export type FinishActualControlMutationBody = AddControlRevisionRequest
    export type FinishActualControlMutationError = CustomProblemDetails

    /**
 * @summary Finish actual control
 */
export const useFinishActualControl = <TError = CustomProblemDetails,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof finishActualControl>>, TError,{id: string;data: AddControlRevisionRequest}, TContext>, }
 , queryClient?: QueryClient): UseMutationResult<
        Awaited<ReturnType<typeof finishActualControl>>,
        TError,
        {id: string;data: AddControlRevisionRequest},
        TContext
      > => {

      const mutationOptions = getFinishActualControlMutationOptions(options);

      return useMutation(mutationOptions , queryClient);
    }
    /**
 * Get master data for operational control filters
 * @summary Get master data for operational control filters
 */
export const getOperationalControlMasterData = (
    
 signal?: AbortSignal
) => {
      
      
      return customInstance<OperationalControlMasterDataDto>(
      {url: `/api/operational-control/master-data`, method: 'GET', signal
    },
      );
    }
  

export const getGetOperationalControlMasterDataQueryKey = () => {
    return [`/api/operational-control/master-data`] as const;
    }

    
export const getGetOperationalControlMasterDataQueryOptions = <TData = Awaited<ReturnType<typeof getOperationalControlMasterData>>, TError = CustomProblemDetails>( options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getOperationalControlMasterData>>, TError, TData>>, }
) => {

const {query: queryOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetOperationalControlMasterDataQueryKey();

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getOperationalControlMasterData>>> = ({ signal }) => getOperationalControlMasterData(signal);

      

      

   return  { queryKey, queryFn, ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getOperationalControlMasterData>>, TError, TData> & { queryKey: DataTag<QueryKey, TData, TError> }
}

export type GetOperationalControlMasterDataQueryResult = NonNullable<Awaited<ReturnType<typeof getOperationalControlMasterData>>>
export type GetOperationalControlMasterDataQueryError = CustomProblemDetails


export function useGetOperationalControlMasterData<TData = Awaited<ReturnType<typeof getOperationalControlMasterData>>, TError = CustomProblemDetails>(
  options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof getOperationalControlMasterData>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getOperationalControlMasterData>>,
          TError,
          Awaited<ReturnType<typeof getOperationalControlMasterData>>
        > , 'initialData'
      >, }
 , queryClient?: QueryClient
  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useGetOperationalControlMasterData<TData = Awaited<ReturnType<typeof getOperationalControlMasterData>>, TError = CustomProblemDetails>(
  options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getOperationalControlMasterData>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getOperationalControlMasterData>>,
          TError,
          Awaited<ReturnType<typeof getOperationalControlMasterData>>
        > , 'initialData'
      >, }
 , queryClient?: QueryClient
  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useGetOperationalControlMasterData<TData = Awaited<ReturnType<typeof getOperationalControlMasterData>>, TError = CustomProblemDetails>(
  options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getOperationalControlMasterData>>, TError, TData>>, }
 , queryClient?: QueryClient
  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
/**
 * @summary Get master data for operational control filters
 */

export function useGetOperationalControlMasterData<TData = Awaited<ReturnType<typeof getOperationalControlMasterData>>, TError = CustomProblemDetails>(
  options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getOperationalControlMasterData>>, TError, TData>>, }
 , queryClient?: QueryClient 
 ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> } {

  const queryOptions = getGetOperationalControlMasterDataQueryOptions(options)

  const query = useQuery(queryOptions , queryClient) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}



/**
 * Create a new group
 * @summary Create a new group
 */
export const createGroup = (
    createGroupRequest: CreateGroupRequest,
 signal?: AbortSignal
) => {
      
      
      return customInstance<number>(
      {url: `/api/operational-control/groups`, method: 'POST',
      headers: {'Content-Type': 'application/json', },
      data: createGroupRequest, signal
    },
      );
    }
  


export const getCreateGroupMutationOptions = <TError = CustomProblemDetails,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof createGroup>>, TError,{data: CreateGroupRequest}, TContext>, }
): UseMutationOptions<Awaited<ReturnType<typeof createGroup>>, TError,{data: CreateGroupRequest}, TContext> => {
    
const mutationKey = ['createGroup'];
const {mutation: mutationOptions} = options ?
      options.mutation && 'mutationKey' in options.mutation && options.mutation.mutationKey ?
      options
      : {...options, mutation: {...options.mutation, mutationKey}}
      : {mutation: { mutationKey, }};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof createGroup>>, {data: CreateGroupRequest}> = (props) => {
          const {data} = props ?? {};

          return  createGroup(data,)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type CreateGroupMutationResult = NonNullable<Awaited<ReturnType<typeof createGroup>>>
    export type CreateGroupMutationBody = CreateGroupRequest
    export type CreateGroupMutationError = CustomProblemDetails

    /**
 * @summary Create a new group
 */
export const useCreateGroup = <TError = CustomProblemDetails,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof createGroup>>, TError,{data: CreateGroupRequest}, TContext>, }
 , queryClient?: QueryClient): UseMutationResult<
        Awaited<ReturnType<typeof createGroup>>,
        TError,
        {data: CreateGroupRequest},
        TContext
      > => {

      const mutationOptions = getCreateGroupMutationOptions(options);

      return useMutation(mutationOptions , queryClient);
    }
    /**
 * Create a new frequency
 * @summary Create a new frequency
 */
export const createFrequency = (
    createFrequencyRequest: CreateFrequencyRequest,
 signal?: AbortSignal
) => {
      
      
      return customInstance<number>(
      {url: `/api/operational-control/frequencies`, method: 'POST',
      headers: {'Content-Type': 'application/json', },
      data: createFrequencyRequest, signal
    },
      );
    }
  


export const getCreateFrequencyMutationOptions = <TError = CustomProblemDetails,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof createFrequency>>, TError,{data: CreateFrequencyRequest}, TContext>, }
): UseMutationOptions<Awaited<ReturnType<typeof createFrequency>>, TError,{data: CreateFrequencyRequest}, TContext> => {
    
const mutationKey = ['createFrequency'];
const {mutation: mutationOptions} = options ?
      options.mutation && 'mutationKey' in options.mutation && options.mutation.mutationKey ?
      options
      : {...options, mutation: {...options.mutation, mutationKey}}
      : {mutation: { mutationKey, }};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof createFrequency>>, {data: CreateFrequencyRequest}> = (props) => {
          const {data} = props ?? {};

          return  createFrequency(data,)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type CreateFrequencyMutationResult = NonNullable<Awaited<ReturnType<typeof createFrequency>>>
    export type CreateFrequencyMutationBody = CreateFrequencyRequest
    export type CreateFrequencyMutationError = CustomProblemDetails

    /**
 * @summary Create a new frequency
 */
export const useCreateFrequency = <TError = CustomProblemDetails,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof createFrequency>>, TError,{data: CreateFrequencyRequest}, TContext>, }
 , queryClient?: QueryClient): UseMutationResult<
        Awaited<ReturnType<typeof createFrequency>>,
        TError,
        {data: CreateFrequencyRequest},
        TContext
      > => {

      const mutationOptions = getCreateFrequencyMutationOptions(options);

      return useMutation(mutationOptions , queryClient);
    }
    