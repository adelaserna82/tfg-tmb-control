/**
 * Generated by orval v7.8.0 🍺
 * Do not edit manually.
 * TMB Control API
 * OpenAPI spec version: v1
 */
import {
  useMutation
} from '@tanstack/react-query';
import type {
  MutationFunction,
  QueryClient,
  UseMutationOptions,
  UseMutationResult
} from '@tanstack/react-query';

import type {
  CustomProblemDetails,
  EmailDto
} from './model';

import { customInstance } from '../customInstance';





/**
 * Envía un email de prueba (desarrollo)
 * @summary Email de prueba
 */
export const sendTestEmail = (
    emailDto: EmailDto,
 signal?: AbortSignal
) => {
      
      
      return customInstance<void>(
      {url: `/api/notifications/email/test`, method: 'POST',
      headers: {'Content-Type': 'application/json', },
      data: emailDto, signal
    },
      );
    }
  


export const getSendTestEmailMutationOptions = <TError = CustomProblemDetails,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof sendTestEmail>>, TError,{data: EmailDto}, TContext>, }
): UseMutationOptions<Awaited<ReturnType<typeof sendTestEmail>>, TError,{data: EmailDto}, TContext> => {
    
const mutationKey = ['sendTestEmail'];
const {mutation: mutationOptions} = options ?
      options.mutation && 'mutationKey' in options.mutation && options.mutation.mutationKey ?
      options
      : {...options, mutation: {...options.mutation, mutationKey}}
      : {mutation: { mutationKey, }};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof sendTestEmail>>, {data: EmailDto}> = (props) => {
          const {data} = props ?? {};

          return  sendTestEmail(data,)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type SendTestEmailMutationResult = NonNullable<Awaited<ReturnType<typeof sendTestEmail>>>
    export type SendTestEmailMutationBody = EmailDto
    export type SendTestEmailMutationError = CustomProblemDetails

    /**
 * @summary Email de prueba
 */
export const useSendTestEmail = <TError = CustomProblemDetails,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof sendTestEmail>>, TError,{data: EmailDto}, TContext>, }
 , queryClient?: QueryClient): UseMutationResult<
        Awaited<ReturnType<typeof sendTestEmail>>,
        TError,
        {data: EmailDto},
        TContext
      > => {

      const mutationOptions = getSendTestEmailMutationOptions(options);

      return useMutation(mutationOptions , queryClient);
    }
    