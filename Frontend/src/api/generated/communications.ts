/**
 * Generated by orval v7.8.0 🍺
 * Do not edit manually.
 * TMB Control API
 * OpenAPI spec version: v1
 */
import {
  useMutation,
  useQuery
} from '@tanstack/react-query';
import type {
  DataTag,
  DefinedInitialDataOptions,
  DefinedUseQueryResult,
  MutationFunction,
  QueryClient,
  QueryFunction,
  QueryKey,
  UndefinedInitialDataOptions,
  UseMutationOptions,
  UseMutationResult,
  UseQueryOptions,
  UseQueryResult
} from '@tanstack/react-query';

import type {
  CommunicationDto,
  CommunicationMasterDataDto,
  CreateCommunicationRequest,
  CreateFormatRequest,
  CreateOriginRequest,
  CustomProblemDetails,
  UpdateCommunicationRequest
} from './model';

import { customInstance } from '../customInstance';





/**
 * Ping endpoint for the Communications module
 * @summary Ping Communications
 */
export const pingCommunications = (
    
 signal?: AbortSignal
) => {
      
      
      return customInstance<unknown>(
      {url: `/api/communications/ping`, method: 'GET', signal
    },
      );
    }
  

export const getPingCommunicationsQueryKey = () => {
    return [`/api/communications/ping`] as const;
    }

    
export const getPingCommunicationsQueryOptions = <TData = Awaited<ReturnType<typeof pingCommunications>>, TError = CustomProblemDetails>( options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof pingCommunications>>, TError, TData>>, }
) => {

const {query: queryOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getPingCommunicationsQueryKey();

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof pingCommunications>>> = ({ signal }) => pingCommunications(signal);

      

      

   return  { queryKey, queryFn, ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof pingCommunications>>, TError, TData> & { queryKey: DataTag<QueryKey, TData, TError> }
}

export type PingCommunicationsQueryResult = NonNullable<Awaited<ReturnType<typeof pingCommunications>>>
export type PingCommunicationsQueryError = CustomProblemDetails


export function usePingCommunications<TData = Awaited<ReturnType<typeof pingCommunications>>, TError = CustomProblemDetails>(
  options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof pingCommunications>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof pingCommunications>>,
          TError,
          Awaited<ReturnType<typeof pingCommunications>>
        > , 'initialData'
      >, }
 , queryClient?: QueryClient
  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function usePingCommunications<TData = Awaited<ReturnType<typeof pingCommunications>>, TError = CustomProblemDetails>(
  options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof pingCommunications>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof pingCommunications>>,
          TError,
          Awaited<ReturnType<typeof pingCommunications>>
        > , 'initialData'
      >, }
 , queryClient?: QueryClient
  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function usePingCommunications<TData = Awaited<ReturnType<typeof pingCommunications>>, TError = CustomProblemDetails>(
  options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof pingCommunications>>, TError, TData>>, }
 , queryClient?: QueryClient
  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
/**
 * @summary Ping Communications
 */

export function usePingCommunications<TData = Awaited<ReturnType<typeof pingCommunications>>, TError = CustomProblemDetails>(
  options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof pingCommunications>>, TError, TData>>, }
 , queryClient?: QueryClient 
 ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> } {

  const queryOptions = getPingCommunicationsQueryOptions(options)

  const query = useQuery(queryOptions , queryClient) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}



/**
 * Get all communications
 * @summary Get all communications
 */
export const getAllCommunications = (
    
 signal?: AbortSignal
) => {
      
      
      return customInstance<CommunicationDto[]>(
      {url: `/api/communications`, method: 'GET', signal
    },
      );
    }
  

export const getGetAllCommunicationsQueryKey = () => {
    return [`/api/communications`] as const;
    }

    
export const getGetAllCommunicationsQueryOptions = <TData = Awaited<ReturnType<typeof getAllCommunications>>, TError = CustomProblemDetails>( options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getAllCommunications>>, TError, TData>>, }
) => {

const {query: queryOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetAllCommunicationsQueryKey();

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getAllCommunications>>> = ({ signal }) => getAllCommunications(signal);

      

      

   return  { queryKey, queryFn, ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getAllCommunications>>, TError, TData> & { queryKey: DataTag<QueryKey, TData, TError> }
}

export type GetAllCommunicationsQueryResult = NonNullable<Awaited<ReturnType<typeof getAllCommunications>>>
export type GetAllCommunicationsQueryError = CustomProblemDetails


export function useGetAllCommunications<TData = Awaited<ReturnType<typeof getAllCommunications>>, TError = CustomProblemDetails>(
  options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof getAllCommunications>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getAllCommunications>>,
          TError,
          Awaited<ReturnType<typeof getAllCommunications>>
        > , 'initialData'
      >, }
 , queryClient?: QueryClient
  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useGetAllCommunications<TData = Awaited<ReturnType<typeof getAllCommunications>>, TError = CustomProblemDetails>(
  options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getAllCommunications>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getAllCommunications>>,
          TError,
          Awaited<ReturnType<typeof getAllCommunications>>
        > , 'initialData'
      >, }
 , queryClient?: QueryClient
  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useGetAllCommunications<TData = Awaited<ReturnType<typeof getAllCommunications>>, TError = CustomProblemDetails>(
  options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getAllCommunications>>, TError, TData>>, }
 , queryClient?: QueryClient
  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
/**
 * @summary Get all communications
 */

export function useGetAllCommunications<TData = Awaited<ReturnType<typeof getAllCommunications>>, TError = CustomProblemDetails>(
  options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getAllCommunications>>, TError, TData>>, }
 , queryClient?: QueryClient 
 ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> } {

  const queryOptions = getGetAllCommunicationsQueryOptions(options)

  const query = useQuery(queryOptions , queryClient) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}



/**
 * Create a new communication
 * @summary Create a new communication
 */
export const createCommunication = (
    createCommunicationRequest: CreateCommunicationRequest,
 signal?: AbortSignal
) => {
      
      
      return customInstance<string>(
      {url: `/api/communications`, method: 'POST',
      headers: {'Content-Type': 'application/json', },
      data: createCommunicationRequest, signal
    },
      );
    }
  


export const getCreateCommunicationMutationOptions = <TError = CustomProblemDetails,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof createCommunication>>, TError,{data: CreateCommunicationRequest}, TContext>, }
): UseMutationOptions<Awaited<ReturnType<typeof createCommunication>>, TError,{data: CreateCommunicationRequest}, TContext> => {
    
const mutationKey = ['createCommunication'];
const {mutation: mutationOptions} = options ?
      options.mutation && 'mutationKey' in options.mutation && options.mutation.mutationKey ?
      options
      : {...options, mutation: {...options.mutation, mutationKey}}
      : {mutation: { mutationKey, }};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof createCommunication>>, {data: CreateCommunicationRequest}> = (props) => {
          const {data} = props ?? {};

          return  createCommunication(data,)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type CreateCommunicationMutationResult = NonNullable<Awaited<ReturnType<typeof createCommunication>>>
    export type CreateCommunicationMutationBody = CreateCommunicationRequest
    export type CreateCommunicationMutationError = CustomProblemDetails

    /**
 * @summary Create a new communication
 */
export const useCreateCommunication = <TError = CustomProblemDetails,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof createCommunication>>, TError,{data: CreateCommunicationRequest}, TContext>, }
 , queryClient?: QueryClient): UseMutationResult<
        Awaited<ReturnType<typeof createCommunication>>,
        TError,
        {data: CreateCommunicationRequest},
        TContext
      > => {

      const mutationOptions = getCreateCommunicationMutationOptions(options);

      return useMutation(mutationOptions , queryClient);
    }
    /**
 * Get communications by category
 * @summary Get communications by category
 */
export const getCommunicationsByCategory = (
    categoryId: number,
 signal?: AbortSignal
) => {
      
      
      return customInstance<CommunicationDto[]>(
      {url: `/api/communications/category/${categoryId}`, method: 'GET', signal
    },
      );
    }
  

export const getGetCommunicationsByCategoryQueryKey = (categoryId: number,) => {
    return [`/api/communications/category/${categoryId}`] as const;
    }

    
export const getGetCommunicationsByCategoryQueryOptions = <TData = Awaited<ReturnType<typeof getCommunicationsByCategory>>, TError = CustomProblemDetails>(categoryId: number, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getCommunicationsByCategory>>, TError, TData>>, }
) => {

const {query: queryOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetCommunicationsByCategoryQueryKey(categoryId);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getCommunicationsByCategory>>> = ({ signal }) => getCommunicationsByCategory(categoryId, signal);

      

      

   return  { queryKey, queryFn, enabled: !!(categoryId), ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getCommunicationsByCategory>>, TError, TData> & { queryKey: DataTag<QueryKey, TData, TError> }
}

export type GetCommunicationsByCategoryQueryResult = NonNullable<Awaited<ReturnType<typeof getCommunicationsByCategory>>>
export type GetCommunicationsByCategoryQueryError = CustomProblemDetails


export function useGetCommunicationsByCategory<TData = Awaited<ReturnType<typeof getCommunicationsByCategory>>, TError = CustomProblemDetails>(
 categoryId: number, options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof getCommunicationsByCategory>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getCommunicationsByCategory>>,
          TError,
          Awaited<ReturnType<typeof getCommunicationsByCategory>>
        > , 'initialData'
      >, }
 , queryClient?: QueryClient
  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useGetCommunicationsByCategory<TData = Awaited<ReturnType<typeof getCommunicationsByCategory>>, TError = CustomProblemDetails>(
 categoryId: number, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getCommunicationsByCategory>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getCommunicationsByCategory>>,
          TError,
          Awaited<ReturnType<typeof getCommunicationsByCategory>>
        > , 'initialData'
      >, }
 , queryClient?: QueryClient
  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useGetCommunicationsByCategory<TData = Awaited<ReturnType<typeof getCommunicationsByCategory>>, TError = CustomProblemDetails>(
 categoryId: number, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getCommunicationsByCategory>>, TError, TData>>, }
 , queryClient?: QueryClient
  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
/**
 * @summary Get communications by category
 */

export function useGetCommunicationsByCategory<TData = Awaited<ReturnType<typeof getCommunicationsByCategory>>, TError = CustomProblemDetails>(
 categoryId: number, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getCommunicationsByCategory>>, TError, TData>>, }
 , queryClient?: QueryClient 
 ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> } {

  const queryOptions = getGetCommunicationsByCategoryQueryOptions(categoryId,options)

  const query = useQuery(queryOptions , queryClient) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}



/**
 * Get a communication by ID
 * @summary Get a communication by ID
 */
export const getCommunicationById = (
    id: string,
 signal?: AbortSignal
) => {
      
      
      return customInstance<CommunicationDto>(
      {url: `/api/communications/${id}`, method: 'GET', signal
    },
      );
    }
  

export const getGetCommunicationByIdQueryKey = (id: string,) => {
    return [`/api/communications/${id}`] as const;
    }

    
export const getGetCommunicationByIdQueryOptions = <TData = Awaited<ReturnType<typeof getCommunicationById>>, TError = CustomProblemDetails>(id: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getCommunicationById>>, TError, TData>>, }
) => {

const {query: queryOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetCommunicationByIdQueryKey(id);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getCommunicationById>>> = ({ signal }) => getCommunicationById(id, signal);

      

      

   return  { queryKey, queryFn, enabled: !!(id), ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getCommunicationById>>, TError, TData> & { queryKey: DataTag<QueryKey, TData, TError> }
}

export type GetCommunicationByIdQueryResult = NonNullable<Awaited<ReturnType<typeof getCommunicationById>>>
export type GetCommunicationByIdQueryError = CustomProblemDetails


export function useGetCommunicationById<TData = Awaited<ReturnType<typeof getCommunicationById>>, TError = CustomProblemDetails>(
 id: string, options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof getCommunicationById>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getCommunicationById>>,
          TError,
          Awaited<ReturnType<typeof getCommunicationById>>
        > , 'initialData'
      >, }
 , queryClient?: QueryClient
  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useGetCommunicationById<TData = Awaited<ReturnType<typeof getCommunicationById>>, TError = CustomProblemDetails>(
 id: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getCommunicationById>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getCommunicationById>>,
          TError,
          Awaited<ReturnType<typeof getCommunicationById>>
        > , 'initialData'
      >, }
 , queryClient?: QueryClient
  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useGetCommunicationById<TData = Awaited<ReturnType<typeof getCommunicationById>>, TError = CustomProblemDetails>(
 id: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getCommunicationById>>, TError, TData>>, }
 , queryClient?: QueryClient
  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
/**
 * @summary Get a communication by ID
 */

export function useGetCommunicationById<TData = Awaited<ReturnType<typeof getCommunicationById>>, TError = CustomProblemDetails>(
 id: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getCommunicationById>>, TError, TData>>, }
 , queryClient?: QueryClient 
 ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> } {

  const queryOptions = getGetCommunicationByIdQueryOptions(id,options)

  const query = useQuery(queryOptions , queryClient) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}



/**
 * Update a communication by ID
 * @summary Update a communication by ID
 */
export const updateCommunication = (
    id: string,
    updateCommunicationRequest: UpdateCommunicationRequest,
 ) => {
      
      
      return customInstance<void>(
      {url: `/api/communications/${id}`, method: 'PUT',
      headers: {'Content-Type': 'application/json', },
      data: updateCommunicationRequest
    },
      );
    }
  


export const getUpdateCommunicationMutationOptions = <TError = CustomProblemDetails,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof updateCommunication>>, TError,{id: string;data: UpdateCommunicationRequest}, TContext>, }
): UseMutationOptions<Awaited<ReturnType<typeof updateCommunication>>, TError,{id: string;data: UpdateCommunicationRequest}, TContext> => {
    
const mutationKey = ['updateCommunication'];
const {mutation: mutationOptions} = options ?
      options.mutation && 'mutationKey' in options.mutation && options.mutation.mutationKey ?
      options
      : {...options, mutation: {...options.mutation, mutationKey}}
      : {mutation: { mutationKey, }};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof updateCommunication>>, {id: string;data: UpdateCommunicationRequest}> = (props) => {
          const {id,data} = props ?? {};

          return  updateCommunication(id,data,)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type UpdateCommunicationMutationResult = NonNullable<Awaited<ReturnType<typeof updateCommunication>>>
    export type UpdateCommunicationMutationBody = UpdateCommunicationRequest
    export type UpdateCommunicationMutationError = CustomProblemDetails

    /**
 * @summary Update a communication by ID
 */
export const useUpdateCommunication = <TError = CustomProblemDetails,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof updateCommunication>>, TError,{id: string;data: UpdateCommunicationRequest}, TContext>, }
 , queryClient?: QueryClient): UseMutationResult<
        Awaited<ReturnType<typeof updateCommunication>>,
        TError,
        {id: string;data: UpdateCommunicationRequest},
        TContext
      > => {

      const mutationOptions = getUpdateCommunicationMutationOptions(options);

      return useMutation(mutationOptions , queryClient);
    }
    /**
 * Delete a communication by ID
 * @summary Delete a communication by ID
 */
export const deleteCommunication = (
    id: string,
 ) => {
      
      
      return customInstance<void>(
      {url: `/api/communications/${id}`, method: 'DELETE'
    },
      );
    }
  


export const getDeleteCommunicationMutationOptions = <TError = CustomProblemDetails,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof deleteCommunication>>, TError,{id: string}, TContext>, }
): UseMutationOptions<Awaited<ReturnType<typeof deleteCommunication>>, TError,{id: string}, TContext> => {
    
const mutationKey = ['deleteCommunication'];
const {mutation: mutationOptions} = options ?
      options.mutation && 'mutationKey' in options.mutation && options.mutation.mutationKey ?
      options
      : {...options, mutation: {...options.mutation, mutationKey}}
      : {mutation: { mutationKey, }};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof deleteCommunication>>, {id: string}> = (props) => {
          const {id} = props ?? {};

          return  deleteCommunication(id,)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type DeleteCommunicationMutationResult = NonNullable<Awaited<ReturnType<typeof deleteCommunication>>>
    
    export type DeleteCommunicationMutationError = CustomProblemDetails

    /**
 * @summary Delete a communication by ID
 */
export const useDeleteCommunication = <TError = CustomProblemDetails,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof deleteCommunication>>, TError,{id: string}, TContext>, }
 , queryClient?: QueryClient): UseMutationResult<
        Awaited<ReturnType<typeof deleteCommunication>>,
        TError,
        {id: string},
        TContext
      > => {

      const mutationOptions = getDeleteCommunicationMutationOptions(options);

      return useMutation(mutationOptions , queryClient);
    }
    /**
 * Get the full thread (parent + children) for a communication
 * @summary Get communication thread
 */
export const getCommunicationThread = (
    id: string,
 signal?: AbortSignal
) => {
      
      
      return customInstance<CommunicationDto[]>(
      {url: `/api/communications/${id}/thread`, method: 'GET', signal
    },
      );
    }
  

export const getGetCommunicationThreadQueryKey = (id: string,) => {
    return [`/api/communications/${id}/thread`] as const;
    }

    
export const getGetCommunicationThreadQueryOptions = <TData = Awaited<ReturnType<typeof getCommunicationThread>>, TError = CustomProblemDetails>(id: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getCommunicationThread>>, TError, TData>>, }
) => {

const {query: queryOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetCommunicationThreadQueryKey(id);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getCommunicationThread>>> = ({ signal }) => getCommunicationThread(id, signal);

      

      

   return  { queryKey, queryFn, enabled: !!(id), ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getCommunicationThread>>, TError, TData> & { queryKey: DataTag<QueryKey, TData, TError> }
}

export type GetCommunicationThreadQueryResult = NonNullable<Awaited<ReturnType<typeof getCommunicationThread>>>
export type GetCommunicationThreadQueryError = CustomProblemDetails


export function useGetCommunicationThread<TData = Awaited<ReturnType<typeof getCommunicationThread>>, TError = CustomProblemDetails>(
 id: string, options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof getCommunicationThread>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getCommunicationThread>>,
          TError,
          Awaited<ReturnType<typeof getCommunicationThread>>
        > , 'initialData'
      >, }
 , queryClient?: QueryClient
  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useGetCommunicationThread<TData = Awaited<ReturnType<typeof getCommunicationThread>>, TError = CustomProblemDetails>(
 id: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getCommunicationThread>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getCommunicationThread>>,
          TError,
          Awaited<ReturnType<typeof getCommunicationThread>>
        > , 'initialData'
      >, }
 , queryClient?: QueryClient
  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useGetCommunicationThread<TData = Awaited<ReturnType<typeof getCommunicationThread>>, TError = CustomProblemDetails>(
 id: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getCommunicationThread>>, TError, TData>>, }
 , queryClient?: QueryClient
  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
/**
 * @summary Get communication thread
 */

export function useGetCommunicationThread<TData = Awaited<ReturnType<typeof getCommunicationThread>>, TError = CustomProblemDetails>(
 id: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getCommunicationThread>>, TError, TData>>, }
 , queryClient?: QueryClient 
 ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> } {

  const queryOptions = getGetCommunicationThreadQueryOptions(id,options)

  const query = useQuery(queryOptions , queryClient) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}



/**
 * Get master data for communications filters
 * @summary Get master data for communications filters
 */
export const getCommunicationMasterData = (
    
 signal?: AbortSignal
) => {
      
      
      return customInstance<CommunicationMasterDataDto>(
      {url: `/api/communications/master-data`, method: 'GET', signal
    },
      );
    }
  

export const getGetCommunicationMasterDataQueryKey = () => {
    return [`/api/communications/master-data`] as const;
    }

    
export const getGetCommunicationMasterDataQueryOptions = <TData = Awaited<ReturnType<typeof getCommunicationMasterData>>, TError = CustomProblemDetails>( options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getCommunicationMasterData>>, TError, TData>>, }
) => {

const {query: queryOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetCommunicationMasterDataQueryKey();

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getCommunicationMasterData>>> = ({ signal }) => getCommunicationMasterData(signal);

      

      

   return  { queryKey, queryFn, ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getCommunicationMasterData>>, TError, TData> & { queryKey: DataTag<QueryKey, TData, TError> }
}

export type GetCommunicationMasterDataQueryResult = NonNullable<Awaited<ReturnType<typeof getCommunicationMasterData>>>
export type GetCommunicationMasterDataQueryError = CustomProblemDetails


export function useGetCommunicationMasterData<TData = Awaited<ReturnType<typeof getCommunicationMasterData>>, TError = CustomProblemDetails>(
  options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof getCommunicationMasterData>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getCommunicationMasterData>>,
          TError,
          Awaited<ReturnType<typeof getCommunicationMasterData>>
        > , 'initialData'
      >, }
 , queryClient?: QueryClient
  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useGetCommunicationMasterData<TData = Awaited<ReturnType<typeof getCommunicationMasterData>>, TError = CustomProblemDetails>(
  options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getCommunicationMasterData>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getCommunicationMasterData>>,
          TError,
          Awaited<ReturnType<typeof getCommunicationMasterData>>
        > , 'initialData'
      >, }
 , queryClient?: QueryClient
  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useGetCommunicationMasterData<TData = Awaited<ReturnType<typeof getCommunicationMasterData>>, TError = CustomProblemDetails>(
  options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getCommunicationMasterData>>, TError, TData>>, }
 , queryClient?: QueryClient
  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
/**
 * @summary Get master data for communications filters
 */

export function useGetCommunicationMasterData<TData = Awaited<ReturnType<typeof getCommunicationMasterData>>, TError = CustomProblemDetails>(
  options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getCommunicationMasterData>>, TError, TData>>, }
 , queryClient?: QueryClient 
 ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> } {

  const queryOptions = getGetCommunicationMasterDataQueryOptions(options)

  const query = useQuery(queryOptions , queryClient) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}



/**
 * Create a new origin
 * @summary Create a new origin
 */
export const createOrigin = (
    createOriginRequest: CreateOriginRequest,
 signal?: AbortSignal
) => {
      
      
      return customInstance<number>(
      {url: `/api/communications/origins`, method: 'POST',
      headers: {'Content-Type': 'application/json', },
      data: createOriginRequest, signal
    },
      );
    }
  


export const getCreateOriginMutationOptions = <TError = CustomProblemDetails,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof createOrigin>>, TError,{data: CreateOriginRequest}, TContext>, }
): UseMutationOptions<Awaited<ReturnType<typeof createOrigin>>, TError,{data: CreateOriginRequest}, TContext> => {
    
const mutationKey = ['createOrigin'];
const {mutation: mutationOptions} = options ?
      options.mutation && 'mutationKey' in options.mutation && options.mutation.mutationKey ?
      options
      : {...options, mutation: {...options.mutation, mutationKey}}
      : {mutation: { mutationKey, }};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof createOrigin>>, {data: CreateOriginRequest}> = (props) => {
          const {data} = props ?? {};

          return  createOrigin(data,)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type CreateOriginMutationResult = NonNullable<Awaited<ReturnType<typeof createOrigin>>>
    export type CreateOriginMutationBody = CreateOriginRequest
    export type CreateOriginMutationError = CustomProblemDetails

    /**
 * @summary Create a new origin
 */
export const useCreateOrigin = <TError = CustomProblemDetails,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof createOrigin>>, TError,{data: CreateOriginRequest}, TContext>, }
 , queryClient?: QueryClient): UseMutationResult<
        Awaited<ReturnType<typeof createOrigin>>,
        TError,
        {data: CreateOriginRequest},
        TContext
      > => {

      const mutationOptions = getCreateOriginMutationOptions(options);

      return useMutation(mutationOptions , queryClient);
    }
    /**
 * Create a new format
 * @summary Create a new format
 */
export const createFormat = (
    createFormatRequest: CreateFormatRequest,
 signal?: AbortSignal
) => {
      
      
      return customInstance<number>(
      {url: `/api/communications/formats`, method: 'POST',
      headers: {'Content-Type': 'application/json', },
      data: createFormatRequest, signal
    },
      );
    }
  


export const getCreateFormatMutationOptions = <TError = CustomProblemDetails,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof createFormat>>, TError,{data: CreateFormatRequest}, TContext>, }
): UseMutationOptions<Awaited<ReturnType<typeof createFormat>>, TError,{data: CreateFormatRequest}, TContext> => {
    
const mutationKey = ['createFormat'];
const {mutation: mutationOptions} = options ?
      options.mutation && 'mutationKey' in options.mutation && options.mutation.mutationKey ?
      options
      : {...options, mutation: {...options.mutation, mutationKey}}
      : {mutation: { mutationKey, }};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof createFormat>>, {data: CreateFormatRequest}> = (props) => {
          const {data} = props ?? {};

          return  createFormat(data,)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type CreateFormatMutationResult = NonNullable<Awaited<ReturnType<typeof createFormat>>>
    export type CreateFormatMutationBody = CreateFormatRequest
    export type CreateFormatMutationError = CustomProblemDetails

    /**
 * @summary Create a new format
 */
export const useCreateFormat = <TError = CustomProblemDetails,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof createFormat>>, TError,{data: CreateFormatRequest}, TContext>, }
 , queryClient?: QueryClient): UseMutationResult<
        Awaited<ReturnType<typeof createFormat>>,
        TError,
        {data: CreateFormatRequest},
        TContext
      > => {

      const mutationOptions = getCreateFormatMutationOptions(options);

      return useMutation(mutationOptions , queryClient);
    }
    