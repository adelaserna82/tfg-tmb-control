/**
 * Generated by orval v7.8.0 🍺
 * Do not edit manually.
 * TMB Control API
 * OpenAPI spec version: v1
 */
import {
  useMutation,
  useQuery
} from '@tanstack/react-query';
import type {
  DataTag,
  DefinedInitialDataOptions,
  DefinedUseQueryResult,
  MutationFunction,
  QueryClient,
  QueryFunction,
  QueryKey,
  UndefinedInitialDataOptions,
  UseMutationOptions,
  UseMutationResult,
  UseQueryOptions,
  UseQueryResult
} from '@tanstack/react-query';

import type {
  CreateSiteRequest,
  CustomProblemDetails,
  SiteDto,
  UpdateSiteRequest
} from './model';

import { customInstance } from '../customInstance';





export const pingSites = (
    
 signal?: AbortSignal
) => {
      
      
      return customInstance<unknown>(
      {url: `/api/sites/ping`, method: 'GET', signal
    },
      );
    }
  

export const getPingSitesQueryKey = () => {
    return [`/api/sites/ping`] as const;
    }

    
export const getPingSitesQueryOptions = <TData = Awaited<ReturnType<typeof pingSites>>, TError = CustomProblemDetails>( options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof pingSites>>, TError, TData>>, }
) => {

const {query: queryOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getPingSitesQueryKey();

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof pingSites>>> = ({ signal }) => pingSites(signal);

      

      

   return  { queryKey, queryFn, ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof pingSites>>, TError, TData> & { queryKey: DataTag<QueryKey, TData, TError> }
}

export type PingSitesQueryResult = NonNullable<Awaited<ReturnType<typeof pingSites>>>
export type PingSitesQueryError = CustomProblemDetails


export function usePingSites<TData = Awaited<ReturnType<typeof pingSites>>, TError = CustomProblemDetails>(
  options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof pingSites>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof pingSites>>,
          TError,
          Awaited<ReturnType<typeof pingSites>>
        > , 'initialData'
      >, }
 , queryClient?: QueryClient
  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function usePingSites<TData = Awaited<ReturnType<typeof pingSites>>, TError = CustomProblemDetails>(
  options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof pingSites>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof pingSites>>,
          TError,
          Awaited<ReturnType<typeof pingSites>>
        > , 'initialData'
      >, }
 , queryClient?: QueryClient
  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function usePingSites<TData = Awaited<ReturnType<typeof pingSites>>, TError = CustomProblemDetails>(
  options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof pingSites>>, TError, TData>>, }
 , queryClient?: QueryClient
  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }

export function usePingSites<TData = Awaited<ReturnType<typeof pingSites>>, TError = CustomProblemDetails>(
  options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof pingSites>>, TError, TData>>, }
 , queryClient?: QueryClient 
 ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> } {

  const queryOptions = getPingSitesQueryOptions(options)

  const query = useQuery(queryOptions , queryClient) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}



/**
 * Get all registered sites with their metadata
 * @summary Get all sites
 */
export const getAllSites = (
    
 signal?: AbortSignal
) => {
      
      
      return customInstance<SiteDto[]>(
      {url: `/api/sites`, method: 'GET', signal
    },
      );
    }
  

export const getGetAllSitesQueryKey = () => {
    return [`/api/sites`] as const;
    }

    
export const getGetAllSitesQueryOptions = <TData = Awaited<ReturnType<typeof getAllSites>>, TError = CustomProblemDetails>( options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getAllSites>>, TError, TData>>, }
) => {

const {query: queryOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetAllSitesQueryKey();

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getAllSites>>> = ({ signal }) => getAllSites(signal);

      

      

   return  { queryKey, queryFn, ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getAllSites>>, TError, TData> & { queryKey: DataTag<QueryKey, TData, TError> }
}

export type GetAllSitesQueryResult = NonNullable<Awaited<ReturnType<typeof getAllSites>>>
export type GetAllSitesQueryError = CustomProblemDetails


export function useGetAllSites<TData = Awaited<ReturnType<typeof getAllSites>>, TError = CustomProblemDetails>(
  options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof getAllSites>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getAllSites>>,
          TError,
          Awaited<ReturnType<typeof getAllSites>>
        > , 'initialData'
      >, }
 , queryClient?: QueryClient
  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useGetAllSites<TData = Awaited<ReturnType<typeof getAllSites>>, TError = CustomProblemDetails>(
  options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getAllSites>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getAllSites>>,
          TError,
          Awaited<ReturnType<typeof getAllSites>>
        > , 'initialData'
      >, }
 , queryClient?: QueryClient
  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useGetAllSites<TData = Awaited<ReturnType<typeof getAllSites>>, TError = CustomProblemDetails>(
  options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getAllSites>>, TError, TData>>, }
 , queryClient?: QueryClient
  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
/**
 * @summary Get all sites
 */

export function useGetAllSites<TData = Awaited<ReturnType<typeof getAllSites>>, TError = CustomProblemDetails>(
  options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getAllSites>>, TError, TData>>, }
 , queryClient?: QueryClient 
 ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> } {

  const queryOptions = getGetAllSitesQueryOptions(options)

  const query = useQuery(queryOptions , queryClient) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}



/**
 * Create a new site entry
 * @summary Create site
 */
export const createSite = (
    createSiteRequest: CreateSiteRequest,
 signal?: AbortSignal
) => {
      
      
      return customInstance<string>(
      {url: `/api/sites`, method: 'POST',
      headers: {'Content-Type': 'application/json', },
      data: createSiteRequest, signal
    },
      );
    }
  


export const getCreateSiteMutationOptions = <TError = CustomProblemDetails,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof createSite>>, TError,{data: CreateSiteRequest}, TContext>, }
): UseMutationOptions<Awaited<ReturnType<typeof createSite>>, TError,{data: CreateSiteRequest}, TContext> => {
    
const mutationKey = ['createSite'];
const {mutation: mutationOptions} = options ?
      options.mutation && 'mutationKey' in options.mutation && options.mutation.mutationKey ?
      options
      : {...options, mutation: {...options.mutation, mutationKey}}
      : {mutation: { mutationKey, }};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof createSite>>, {data: CreateSiteRequest}> = (props) => {
          const {data} = props ?? {};

          return  createSite(data,)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type CreateSiteMutationResult = NonNullable<Awaited<ReturnType<typeof createSite>>>
    export type CreateSiteMutationBody = CreateSiteRequest
    export type CreateSiteMutationError = CustomProblemDetails

    /**
 * @summary Create site
 */
export const useCreateSite = <TError = CustomProblemDetails,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof createSite>>, TError,{data: CreateSiteRequest}, TContext>, }
 , queryClient?: QueryClient): UseMutationResult<
        Awaited<ReturnType<typeof createSite>>,
        TError,
        {data: CreateSiteRequest},
        TContext
      > => {

      const mutationOptions = getCreateSiteMutationOptions(options);

      return useMutation(mutationOptions , queryClient);
    }
    /**
 * Get a site by its unique identifier
 * @summary Get site by ID
 */
export const getSiteById = (
    id: string,
 signal?: AbortSignal
) => {
      
      
      return customInstance<SiteDto>(
      {url: `/api/sites/${id}`, method: 'GET', signal
    },
      );
    }
  

export const getGetSiteByIdQueryKey = (id: string,) => {
    return [`/api/sites/${id}`] as const;
    }

    
export const getGetSiteByIdQueryOptions = <TData = Awaited<ReturnType<typeof getSiteById>>, TError = CustomProblemDetails>(id: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getSiteById>>, TError, TData>>, }
) => {

const {query: queryOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetSiteByIdQueryKey(id);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getSiteById>>> = ({ signal }) => getSiteById(id, signal);

      

      

   return  { queryKey, queryFn, enabled: !!(id), ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getSiteById>>, TError, TData> & { queryKey: DataTag<QueryKey, TData, TError> }
}

export type GetSiteByIdQueryResult = NonNullable<Awaited<ReturnType<typeof getSiteById>>>
export type GetSiteByIdQueryError = CustomProblemDetails


export function useGetSiteById<TData = Awaited<ReturnType<typeof getSiteById>>, TError = CustomProblemDetails>(
 id: string, options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof getSiteById>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getSiteById>>,
          TError,
          Awaited<ReturnType<typeof getSiteById>>
        > , 'initialData'
      >, }
 , queryClient?: QueryClient
  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useGetSiteById<TData = Awaited<ReturnType<typeof getSiteById>>, TError = CustomProblemDetails>(
 id: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getSiteById>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getSiteById>>,
          TError,
          Awaited<ReturnType<typeof getSiteById>>
        > , 'initialData'
      >, }
 , queryClient?: QueryClient
  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useGetSiteById<TData = Awaited<ReturnType<typeof getSiteById>>, TError = CustomProblemDetails>(
 id: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getSiteById>>, TError, TData>>, }
 , queryClient?: QueryClient
  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
/**
 * @summary Get site by ID
 */

export function useGetSiteById<TData = Awaited<ReturnType<typeof getSiteById>>, TError = CustomProblemDetails>(
 id: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getSiteById>>, TError, TData>>, }
 , queryClient?: QueryClient 
 ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> } {

  const queryOptions = getGetSiteByIdQueryOptions(id,options)

  const query = useQuery(queryOptions , queryClient) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}



/**
 * Update an existing site
 * @summary Update site
 */
export const updateSite = (
    id: string,
    updateSiteRequest: UpdateSiteRequest,
 ) => {
      
      
      return customInstance<void>(
      {url: `/api/sites/${id}`, method: 'PUT',
      headers: {'Content-Type': 'application/json', },
      data: updateSiteRequest
    },
      );
    }
  


export const getUpdateSiteMutationOptions = <TError = CustomProblemDetails,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof updateSite>>, TError,{id: string;data: UpdateSiteRequest}, TContext>, }
): UseMutationOptions<Awaited<ReturnType<typeof updateSite>>, TError,{id: string;data: UpdateSiteRequest}, TContext> => {
    
const mutationKey = ['updateSite'];
const {mutation: mutationOptions} = options ?
      options.mutation && 'mutationKey' in options.mutation && options.mutation.mutationKey ?
      options
      : {...options, mutation: {...options.mutation, mutationKey}}
      : {mutation: { mutationKey, }};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof updateSite>>, {id: string;data: UpdateSiteRequest}> = (props) => {
          const {id,data} = props ?? {};

          return  updateSite(id,data,)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type UpdateSiteMutationResult = NonNullable<Awaited<ReturnType<typeof updateSite>>>
    export type UpdateSiteMutationBody = UpdateSiteRequest
    export type UpdateSiteMutationError = CustomProblemDetails

    /**
 * @summary Update site
 */
export const useUpdateSite = <TError = CustomProblemDetails,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof updateSite>>, TError,{id: string;data: UpdateSiteRequest}, TContext>, }
 , queryClient?: QueryClient): UseMutationResult<
        Awaited<ReturnType<typeof updateSite>>,
        TError,
        {id: string;data: UpdateSiteRequest},
        TContext
      > => {

      const mutationOptions = getUpdateSiteMutationOptions(options);

      return useMutation(mutationOptions , queryClient);
    }
    /**
 * Delete a site by ID
 * @summary Delete site
 */
export const deleteSite = (
    id: string,
 ) => {
      
      
      return customInstance<void>(
      {url: `/api/sites/${id}`, method: 'DELETE'
    },
      );
    }
  


export const getDeleteSiteMutationOptions = <TError = CustomProblemDetails,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof deleteSite>>, TError,{id: string}, TContext>, }
): UseMutationOptions<Awaited<ReturnType<typeof deleteSite>>, TError,{id: string}, TContext> => {
    
const mutationKey = ['deleteSite'];
const {mutation: mutationOptions} = options ?
      options.mutation && 'mutationKey' in options.mutation && options.mutation.mutationKey ?
      options
      : {...options, mutation: {...options.mutation, mutationKey}}
      : {mutation: { mutationKey, }};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof deleteSite>>, {id: string}> = (props) => {
          const {id} = props ?? {};

          return  deleteSite(id,)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type DeleteSiteMutationResult = NonNullable<Awaited<ReturnType<typeof deleteSite>>>
    
    export type DeleteSiteMutationError = CustomProblemDetails

    /**
 * @summary Delete site
 */
export const useDeleteSite = <TError = CustomProblemDetails,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof deleteSite>>, TError,{id: string}, TContext>, }
 , queryClient?: QueryClient): UseMutationResult<
        Awaited<ReturnType<typeof deleteSite>>,
        TError,
        {id: string},
        TContext
      > => {

      const mutationOptions = getDeleteSiteMutationOptions(options);

      return useMutation(mutationOptions , queryClient);
    }
    