/**
 * Generated by orval v7.8.0 🍺
 * Do not edit manually.
 * TMB Control API
 * OpenAPI spec version: v1
 */
import {
  useMutation,
  useQuery
} from '@tanstack/react-query';
import type {
  DataTag,
  DefinedInitialDataOptions,
  DefinedUseQueryResult,
  MutationFunction,
  QueryClient,
  QueryFunction,
  QueryKey,
  UndefinedInitialDataOptions,
  UseMutationOptions,
  UseMutationResult,
  UseQueryOptions,
  UseQueryResult
} from '@tanstack/react-query';

import type {
  CreateActionPlanRequest,
  CreateAreaRequest,
  CreateObjectiveRequest,
  CustomProblemDetails,
  DuplicateActionPlansRequest,
  ObjectiveActionPlanDto,
  ObjectiveDto,
  ObjectiveMasterDataDto,
  ProblemDetails,
  UpdateActionPlanRequest
} from './model';

import { customInstance } from '../customInstance';





/**
 * Ping endpoint for the Objectives module
 * @summary Ping endpoint for the Objectives module
 */
export const pingObjectives = (
    
 signal?: AbortSignal
) => {
      
      
      return customInstance<unknown>(
      {url: `/api/action-plans/ping`, method: 'GET', signal
    },
      );
    }
  

export const getPingObjectivesQueryKey = () => {
    return [`/api/action-plans/ping`] as const;
    }

    
export const getPingObjectivesQueryOptions = <TData = Awaited<ReturnType<typeof pingObjectives>>, TError = CustomProblemDetails>( options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof pingObjectives>>, TError, TData>>, }
) => {

const {query: queryOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getPingObjectivesQueryKey();

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof pingObjectives>>> = ({ signal }) => pingObjectives(signal);

      

      

   return  { queryKey, queryFn, ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof pingObjectives>>, TError, TData> & { queryKey: DataTag<QueryKey, TData, TError> }
}

export type PingObjectivesQueryResult = NonNullable<Awaited<ReturnType<typeof pingObjectives>>>
export type PingObjectivesQueryError = CustomProblemDetails


export function usePingObjectives<TData = Awaited<ReturnType<typeof pingObjectives>>, TError = CustomProblemDetails>(
  options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof pingObjectives>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof pingObjectives>>,
          TError,
          Awaited<ReturnType<typeof pingObjectives>>
        > , 'initialData'
      >, }
 , queryClient?: QueryClient
  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function usePingObjectives<TData = Awaited<ReturnType<typeof pingObjectives>>, TError = CustomProblemDetails>(
  options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof pingObjectives>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof pingObjectives>>,
          TError,
          Awaited<ReturnType<typeof pingObjectives>>
        > , 'initialData'
      >, }
 , queryClient?: QueryClient
  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function usePingObjectives<TData = Awaited<ReturnType<typeof pingObjectives>>, TError = CustomProblemDetails>(
  options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof pingObjectives>>, TError, TData>>, }
 , queryClient?: QueryClient
  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
/**
 * @summary Ping endpoint for the Objectives module
 */

export function usePingObjectives<TData = Awaited<ReturnType<typeof pingObjectives>>, TError = CustomProblemDetails>(
  options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof pingObjectives>>, TError, TData>>, }
 , queryClient?: QueryClient 
 ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> } {

  const queryOptions = getPingObjectivesQueryOptions(options)

  const query = useQuery(queryOptions , queryClient) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}



/**
 * Get all action plans with their actions
 * @summary Get all action plans
 */
export const getAllActionPlans = (
    
 signal?: AbortSignal
) => {
      
      
      return customInstance<ObjectiveActionPlanDto[]>(
      {url: `/api/action-plans`, method: 'GET', signal
    },
      );
    }
  

export const getGetAllActionPlansQueryKey = () => {
    return [`/api/action-plans`] as const;
    }

    
export const getGetAllActionPlansQueryOptions = <TData = Awaited<ReturnType<typeof getAllActionPlans>>, TError = CustomProblemDetails>( options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getAllActionPlans>>, TError, TData>>, }
) => {

const {query: queryOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetAllActionPlansQueryKey();

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getAllActionPlans>>> = ({ signal }) => getAllActionPlans(signal);

      

      

   return  { queryKey, queryFn, ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getAllActionPlans>>, TError, TData> & { queryKey: DataTag<QueryKey, TData, TError> }
}

export type GetAllActionPlansQueryResult = NonNullable<Awaited<ReturnType<typeof getAllActionPlans>>>
export type GetAllActionPlansQueryError = CustomProblemDetails


export function useGetAllActionPlans<TData = Awaited<ReturnType<typeof getAllActionPlans>>, TError = CustomProblemDetails>(
  options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof getAllActionPlans>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getAllActionPlans>>,
          TError,
          Awaited<ReturnType<typeof getAllActionPlans>>
        > , 'initialData'
      >, }
 , queryClient?: QueryClient
  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useGetAllActionPlans<TData = Awaited<ReturnType<typeof getAllActionPlans>>, TError = CustomProblemDetails>(
  options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getAllActionPlans>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getAllActionPlans>>,
          TError,
          Awaited<ReturnType<typeof getAllActionPlans>>
        > , 'initialData'
      >, }
 , queryClient?: QueryClient
  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useGetAllActionPlans<TData = Awaited<ReturnType<typeof getAllActionPlans>>, TError = CustomProblemDetails>(
  options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getAllActionPlans>>, TError, TData>>, }
 , queryClient?: QueryClient
  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
/**
 * @summary Get all action plans
 */

export function useGetAllActionPlans<TData = Awaited<ReturnType<typeof getAllActionPlans>>, TError = CustomProblemDetails>(
  options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getAllActionPlans>>, TError, TData>>, }
 , queryClient?: QueryClient 
 ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> } {

  const queryOptions = getGetAllActionPlansQueryOptions(options)

  const query = useQuery(queryOptions , queryClient) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}



/**
 * Create a new action plan
 * @summary Create action plan
 */
export const createActionPlan = (
    createActionPlanRequest: CreateActionPlanRequest,
 signal?: AbortSignal
) => {
      
      
      return customInstance<string>(
      {url: `/api/action-plans`, method: 'POST',
      headers: {'Content-Type': 'application/json', },
      data: createActionPlanRequest, signal
    },
      );
    }
  


export const getCreateActionPlanMutationOptions = <TError = CustomProblemDetails,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof createActionPlan>>, TError,{data: CreateActionPlanRequest}, TContext>, }
): UseMutationOptions<Awaited<ReturnType<typeof createActionPlan>>, TError,{data: CreateActionPlanRequest}, TContext> => {
    
const mutationKey = ['createActionPlan'];
const {mutation: mutationOptions} = options ?
      options.mutation && 'mutationKey' in options.mutation && options.mutation.mutationKey ?
      options
      : {...options, mutation: {...options.mutation, mutationKey}}
      : {mutation: { mutationKey, }};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof createActionPlan>>, {data: CreateActionPlanRequest}> = (props) => {
          const {data} = props ?? {};

          return  createActionPlan(data,)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type CreateActionPlanMutationResult = NonNullable<Awaited<ReturnType<typeof createActionPlan>>>
    export type CreateActionPlanMutationBody = CreateActionPlanRequest
    export type CreateActionPlanMutationError = CustomProblemDetails

    /**
 * @summary Create action plan
 */
export const useCreateActionPlan = <TError = CustomProblemDetails,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof createActionPlan>>, TError,{data: CreateActionPlanRequest}, TContext>, }
 , queryClient?: QueryClient): UseMutationResult<
        Awaited<ReturnType<typeof createActionPlan>>,
        TError,
        {data: CreateActionPlanRequest},
        TContext
      > => {

      const mutationOptions = getCreateActionPlanMutationOptions(options);

      return useMutation(mutationOptions , queryClient);
    }
    /**
 * Get a specific action plan by ID
 * @summary Get objective by ID
 */
export const getActionPlanById = (
    id: string,
 signal?: AbortSignal
) => {
      
      
      return customInstance<ObjectiveDto>(
      {url: `/api/action-plans/${id}`, method: 'GET', signal
    },
      );
    }
  

export const getGetActionPlanByIdQueryKey = (id: string,) => {
    return [`/api/action-plans/${id}`] as const;
    }

    
export const getGetActionPlanByIdQueryOptions = <TData = Awaited<ReturnType<typeof getActionPlanById>>, TError = CustomProblemDetails>(id: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getActionPlanById>>, TError, TData>>, }
) => {

const {query: queryOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetActionPlanByIdQueryKey(id);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getActionPlanById>>> = ({ signal }) => getActionPlanById(id, signal);

      

      

   return  { queryKey, queryFn, enabled: !!(id), ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getActionPlanById>>, TError, TData> & { queryKey: DataTag<QueryKey, TData, TError> }
}

export type GetActionPlanByIdQueryResult = NonNullable<Awaited<ReturnType<typeof getActionPlanById>>>
export type GetActionPlanByIdQueryError = CustomProblemDetails


export function useGetActionPlanById<TData = Awaited<ReturnType<typeof getActionPlanById>>, TError = CustomProblemDetails>(
 id: string, options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof getActionPlanById>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getActionPlanById>>,
          TError,
          Awaited<ReturnType<typeof getActionPlanById>>
        > , 'initialData'
      >, }
 , queryClient?: QueryClient
  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useGetActionPlanById<TData = Awaited<ReturnType<typeof getActionPlanById>>, TError = CustomProblemDetails>(
 id: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getActionPlanById>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getActionPlanById>>,
          TError,
          Awaited<ReturnType<typeof getActionPlanById>>
        > , 'initialData'
      >, }
 , queryClient?: QueryClient
  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useGetActionPlanById<TData = Awaited<ReturnType<typeof getActionPlanById>>, TError = CustomProblemDetails>(
 id: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getActionPlanById>>, TError, TData>>, }
 , queryClient?: QueryClient
  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
/**
 * @summary Get objective by ID
 */

export function useGetActionPlanById<TData = Awaited<ReturnType<typeof getActionPlanById>>, TError = CustomProblemDetails>(
 id: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getActionPlanById>>, TError, TData>>, }
 , queryClient?: QueryClient 
 ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> } {

  const queryOptions = getGetActionPlanByIdQueryOptions(id,options)

  const query = useQuery(queryOptions , queryClient) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}



/**
 * Update an existing action plan
 * @summary Update action plan
 */
export const updateActionPlan = (
    id: string,
    updateActionPlanRequest: UpdateActionPlanRequest,
 ) => {
      
      
      return customInstance<void>(
      {url: `/api/action-plans/${id}`, method: 'PUT',
      headers: {'Content-Type': 'application/json', },
      data: updateActionPlanRequest
    },
      );
    }
  


export const getUpdateActionPlanMutationOptions = <TError = CustomProblemDetails,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof updateActionPlan>>, TError,{id: string;data: UpdateActionPlanRequest}, TContext>, }
): UseMutationOptions<Awaited<ReturnType<typeof updateActionPlan>>, TError,{id: string;data: UpdateActionPlanRequest}, TContext> => {
    
const mutationKey = ['updateActionPlan'];
const {mutation: mutationOptions} = options ?
      options.mutation && 'mutationKey' in options.mutation && options.mutation.mutationKey ?
      options
      : {...options, mutation: {...options.mutation, mutationKey}}
      : {mutation: { mutationKey, }};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof updateActionPlan>>, {id: string;data: UpdateActionPlanRequest}> = (props) => {
          const {id,data} = props ?? {};

          return  updateActionPlan(id,data,)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type UpdateActionPlanMutationResult = NonNullable<Awaited<ReturnType<typeof updateActionPlan>>>
    export type UpdateActionPlanMutationBody = UpdateActionPlanRequest
    export type UpdateActionPlanMutationError = CustomProblemDetails

    /**
 * @summary Update action plan
 */
export const useUpdateActionPlan = <TError = CustomProblemDetails,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof updateActionPlan>>, TError,{id: string;data: UpdateActionPlanRequest}, TContext>, }
 , queryClient?: QueryClient): UseMutationResult<
        Awaited<ReturnType<typeof updateActionPlan>>,
        TError,
        {id: string;data: UpdateActionPlanRequest},
        TContext
      > => {

      const mutationOptions = getUpdateActionPlanMutationOptions(options);

      return useMutation(mutationOptions , queryClient);
    }
    /**
 * Delete an action plan
 * @summary Delete action plan
 */
export const deleteActionPlan = (
    id: string,
 ) => {
      
      
      return customInstance<void>(
      {url: `/api/action-plans/${id}`, method: 'DELETE'
    },
      );
    }
  


export const getDeleteActionPlanMutationOptions = <TError = ProblemDetails,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof deleteActionPlan>>, TError,{id: string}, TContext>, }
): UseMutationOptions<Awaited<ReturnType<typeof deleteActionPlan>>, TError,{id: string}, TContext> => {
    
const mutationKey = ['deleteActionPlan'];
const {mutation: mutationOptions} = options ?
      options.mutation && 'mutationKey' in options.mutation && options.mutation.mutationKey ?
      options
      : {...options, mutation: {...options.mutation, mutationKey}}
      : {mutation: { mutationKey, }};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof deleteActionPlan>>, {id: string}> = (props) => {
          const {id} = props ?? {};

          return  deleteActionPlan(id,)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type DeleteActionPlanMutationResult = NonNullable<Awaited<ReturnType<typeof deleteActionPlan>>>
    
    export type DeleteActionPlanMutationError = ProblemDetails

    /**
 * @summary Delete action plan
 */
export const useDeleteActionPlan = <TError = ProblemDetails,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof deleteActionPlan>>, TError,{id: string}, TContext>, }
 , queryClient?: QueryClient): UseMutationResult<
        Awaited<ReturnType<typeof deleteActionPlan>>,
        TError,
        {id: string},
        TContext
      > => {

      const mutationOptions = getDeleteActionPlanMutationOptions(options);

      return useMutation(mutationOptions , queryClient);
    }
    /**
 * Duplicate all action plans from a given year into a new one
 * @summary Duplicate action plans by year
 */
export const duplicateActionPlansByYear = (
    duplicateActionPlansRequest: DuplicateActionPlansRequest,
 signal?: AbortSignal
) => {
      
      
      return customInstance<void>(
      {url: `/api/action-plans/duplicate`, method: 'POST',
      headers: {'Content-Type': 'application/json', },
      data: duplicateActionPlansRequest, signal
    },
      );
    }
  


export const getDuplicateActionPlansByYearMutationOptions = <TError = CustomProblemDetails,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof duplicateActionPlansByYear>>, TError,{data: DuplicateActionPlansRequest}, TContext>, }
): UseMutationOptions<Awaited<ReturnType<typeof duplicateActionPlansByYear>>, TError,{data: DuplicateActionPlansRequest}, TContext> => {
    
const mutationKey = ['duplicateActionPlansByYear'];
const {mutation: mutationOptions} = options ?
      options.mutation && 'mutationKey' in options.mutation && options.mutation.mutationKey ?
      options
      : {...options, mutation: {...options.mutation, mutationKey}}
      : {mutation: { mutationKey, }};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof duplicateActionPlansByYear>>, {data: DuplicateActionPlansRequest}> = (props) => {
          const {data} = props ?? {};

          return  duplicateActionPlansByYear(data,)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type DuplicateActionPlansByYearMutationResult = NonNullable<Awaited<ReturnType<typeof duplicateActionPlansByYear>>>
    export type DuplicateActionPlansByYearMutationBody = DuplicateActionPlansRequest
    export type DuplicateActionPlansByYearMutationError = CustomProblemDetails

    /**
 * @summary Duplicate action plans by year
 */
export const useDuplicateActionPlansByYear = <TError = CustomProblemDetails,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof duplicateActionPlansByYear>>, TError,{data: DuplicateActionPlansRequest}, TContext>, }
 , queryClient?: QueryClient): UseMutationResult<
        Awaited<ReturnType<typeof duplicateActionPlansByYear>>,
        TError,
        {data: DuplicateActionPlansRequest},
        TContext
      > => {

      const mutationOptions = getDuplicateActionPlansByYearMutationOptions(options);

      return useMutation(mutationOptions , queryClient);
    }
    /**
 * Get master data for objective filters
 * @summary Get master data for objective filters
 */
export const getObjectiveMasterData = (
    
 signal?: AbortSignal
) => {
      
      
      return customInstance<ObjectiveMasterDataDto>(
      {url: `/api/action-plans/master-data`, method: 'GET', signal
    },
      );
    }
  

export const getGetObjectiveMasterDataQueryKey = () => {
    return [`/api/action-plans/master-data`] as const;
    }

    
export const getGetObjectiveMasterDataQueryOptions = <TData = Awaited<ReturnType<typeof getObjectiveMasterData>>, TError = CustomProblemDetails>( options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getObjectiveMasterData>>, TError, TData>>, }
) => {

const {query: queryOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetObjectiveMasterDataQueryKey();

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getObjectiveMasterData>>> = ({ signal }) => getObjectiveMasterData(signal);

      

      

   return  { queryKey, queryFn, ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getObjectiveMasterData>>, TError, TData> & { queryKey: DataTag<QueryKey, TData, TError> }
}

export type GetObjectiveMasterDataQueryResult = NonNullable<Awaited<ReturnType<typeof getObjectiveMasterData>>>
export type GetObjectiveMasterDataQueryError = CustomProblemDetails


export function useGetObjectiveMasterData<TData = Awaited<ReturnType<typeof getObjectiveMasterData>>, TError = CustomProblemDetails>(
  options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof getObjectiveMasterData>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getObjectiveMasterData>>,
          TError,
          Awaited<ReturnType<typeof getObjectiveMasterData>>
        > , 'initialData'
      >, }
 , queryClient?: QueryClient
  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useGetObjectiveMasterData<TData = Awaited<ReturnType<typeof getObjectiveMasterData>>, TError = CustomProblemDetails>(
  options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getObjectiveMasterData>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getObjectiveMasterData>>,
          TError,
          Awaited<ReturnType<typeof getObjectiveMasterData>>
        > , 'initialData'
      >, }
 , queryClient?: QueryClient
  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useGetObjectiveMasterData<TData = Awaited<ReturnType<typeof getObjectiveMasterData>>, TError = CustomProblemDetails>(
  options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getObjectiveMasterData>>, TError, TData>>, }
 , queryClient?: QueryClient
  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
/**
 * @summary Get master data for objective filters
 */

export function useGetObjectiveMasterData<TData = Awaited<ReturnType<typeof getObjectiveMasterData>>, TError = CustomProblemDetails>(
  options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getObjectiveMasterData>>, TError, TData>>, }
 , queryClient?: QueryClient 
 ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> } {

  const queryOptions = getGetObjectiveMasterDataQueryOptions(options)

  const query = useQuery(queryOptions , queryClient) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}



/**
 * Create a new area
 * @summary Create area
 */
export const createArea = (
    createAreaRequest: CreateAreaRequest,
 signal?: AbortSignal
) => {
      
      
      return customInstance<string>(
      {url: `/api/action-plans/areas`, method: 'POST',
      headers: {'Content-Type': 'application/json', },
      data: createAreaRequest, signal
    },
      );
    }
  


export const getCreateAreaMutationOptions = <TError = CustomProblemDetails,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof createArea>>, TError,{data: CreateAreaRequest}, TContext>, }
): UseMutationOptions<Awaited<ReturnType<typeof createArea>>, TError,{data: CreateAreaRequest}, TContext> => {
    
const mutationKey = ['createArea'];
const {mutation: mutationOptions} = options ?
      options.mutation && 'mutationKey' in options.mutation && options.mutation.mutationKey ?
      options
      : {...options, mutation: {...options.mutation, mutationKey}}
      : {mutation: { mutationKey, }};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof createArea>>, {data: CreateAreaRequest}> = (props) => {
          const {data} = props ?? {};

          return  createArea(data,)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type CreateAreaMutationResult = NonNullable<Awaited<ReturnType<typeof createArea>>>
    export type CreateAreaMutationBody = CreateAreaRequest
    export type CreateAreaMutationError = CustomProblemDetails

    /**
 * @summary Create area
 */
export const useCreateArea = <TError = CustomProblemDetails,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof createArea>>, TError,{data: CreateAreaRequest}, TContext>, }
 , queryClient?: QueryClient): UseMutationResult<
        Awaited<ReturnType<typeof createArea>>,
        TError,
        {data: CreateAreaRequest},
        TContext
      > => {

      const mutationOptions = getCreateAreaMutationOptions(options);

      return useMutation(mutationOptions , queryClient);
    }
    /**
 * Create a new objective
 * @summary Create objective
 */
export const createObjective = (
    createObjectiveRequest: CreateObjectiveRequest,
 signal?: AbortSignal
) => {
      
      
      return customInstance<string>(
      {url: `/api/action-plans/objective`, method: 'POST',
      headers: {'Content-Type': 'application/json', },
      data: createObjectiveRequest, signal
    },
      );
    }
  


export const getCreateObjectiveMutationOptions = <TError = CustomProblemDetails,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof createObjective>>, TError,{data: CreateObjectiveRequest}, TContext>, }
): UseMutationOptions<Awaited<ReturnType<typeof createObjective>>, TError,{data: CreateObjectiveRequest}, TContext> => {
    
const mutationKey = ['createObjective'];
const {mutation: mutationOptions} = options ?
      options.mutation && 'mutationKey' in options.mutation && options.mutation.mutationKey ?
      options
      : {...options, mutation: {...options.mutation, mutationKey}}
      : {mutation: { mutationKey, }};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof createObjective>>, {data: CreateObjectiveRequest}> = (props) => {
          const {data} = props ?? {};

          return  createObjective(data,)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type CreateObjectiveMutationResult = NonNullable<Awaited<ReturnType<typeof createObjective>>>
    export type CreateObjectiveMutationBody = CreateObjectiveRequest
    export type CreateObjectiveMutationError = CustomProblemDetails

    /**
 * @summary Create objective
 */
export const useCreateObjective = <TError = CustomProblemDetails,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof createObjective>>, TError,{data: CreateObjectiveRequest}, TContext>, }
 , queryClient?: QueryClient): UseMutationResult<
        Awaited<ReturnType<typeof createObjective>>,
        TError,
        {data: CreateObjectiveRequest},
        TContext
      > => {

      const mutationOptions = getCreateObjectiveMutationOptions(options);

      return useMutation(mutationOptions , queryClient);
    }
    