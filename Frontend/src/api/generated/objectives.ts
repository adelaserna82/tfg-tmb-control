/**
 * Generated by orval v7.8.0 🍺
 * Do not edit manually.
 * TMB Control API
 * OpenAPI spec version: v1
 */
import {
  useMutation,
  useQuery
} from '@tanstack/react-query';
import type {
  DataTag,
  DefinedInitialDataOptions,
  DefinedUseQueryResult,
  MutationFunction,
  QueryClient,
  QueryFunction,
  QueryKey,
  UndefinedInitialDataOptions,
  UseMutationOptions,
  UseMutationResult,
  UseQueryOptions,
  UseQueryResult
} from '@tanstack/react-query';

import type {
  CreateObjectiveRequest,
  CustomProblemDetails,
  DuplicateObjectivesRequest,
  ObjectiveDto,
  ProblemDetails,
  UpdateObjectiveRequest
} from './model';

import { customInstance } from '../customInstance';





/**
 * Ping endpoint for the Objectives module
 * @summary Ping endpoint for the Objectives module
 */
export const pingObjectives = (
    
 signal?: AbortSignal
) => {
      
      
      return customInstance<unknown>(
      {url: `/api/objectives/ping`, method: 'GET', signal
    },
      );
    }
  

export const getPingObjectivesQueryKey = () => {
    return [`/api/objectives/ping`] as const;
    }

    
export const getPingObjectivesQueryOptions = <TData = Awaited<ReturnType<typeof pingObjectives>>, TError = CustomProblemDetails>( options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof pingObjectives>>, TError, TData>>, }
) => {

const {query: queryOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getPingObjectivesQueryKey();

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof pingObjectives>>> = ({ signal }) => pingObjectives(signal);

      

      

   return  { queryKey, queryFn, ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof pingObjectives>>, TError, TData> & { queryKey: DataTag<QueryKey, TData, TError> }
}

export type PingObjectivesQueryResult = NonNullable<Awaited<ReturnType<typeof pingObjectives>>>
export type PingObjectivesQueryError = CustomProblemDetails


export function usePingObjectives<TData = Awaited<ReturnType<typeof pingObjectives>>, TError = CustomProblemDetails>(
  options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof pingObjectives>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof pingObjectives>>,
          TError,
          Awaited<ReturnType<typeof pingObjectives>>
        > , 'initialData'
      >, }
 , queryClient?: QueryClient
  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function usePingObjectives<TData = Awaited<ReturnType<typeof pingObjectives>>, TError = CustomProblemDetails>(
  options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof pingObjectives>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof pingObjectives>>,
          TError,
          Awaited<ReturnType<typeof pingObjectives>>
        > , 'initialData'
      >, }
 , queryClient?: QueryClient
  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function usePingObjectives<TData = Awaited<ReturnType<typeof pingObjectives>>, TError = CustomProblemDetails>(
  options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof pingObjectives>>, TError, TData>>, }
 , queryClient?: QueryClient
  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
/**
 * @summary Ping endpoint for the Objectives module
 */

export function usePingObjectives<TData = Awaited<ReturnType<typeof pingObjectives>>, TError = CustomProblemDetails>(
  options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof pingObjectives>>, TError, TData>>, }
 , queryClient?: QueryClient 
 ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> } {

  const queryOptions = getPingObjectivesQueryOptions(options)

  const query = useQuery(queryOptions , queryClient) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}



/**
 * Get all objectives with their actions
 * @summary Get all objectives
 */
export const getAllObjectives = (
    
 signal?: AbortSignal
) => {
      
      
      return customInstance<ObjectiveDto[]>(
      {url: `/api/objectives`, method: 'GET', signal
    },
      );
    }
  

export const getGetAllObjectivesQueryKey = () => {
    return [`/api/objectives`] as const;
    }

    
export const getGetAllObjectivesQueryOptions = <TData = Awaited<ReturnType<typeof getAllObjectives>>, TError = CustomProblemDetails>( options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getAllObjectives>>, TError, TData>>, }
) => {

const {query: queryOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetAllObjectivesQueryKey();

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getAllObjectives>>> = ({ signal }) => getAllObjectives(signal);

      

      

   return  { queryKey, queryFn, ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getAllObjectives>>, TError, TData> & { queryKey: DataTag<QueryKey, TData, TError> }
}

export type GetAllObjectivesQueryResult = NonNullable<Awaited<ReturnType<typeof getAllObjectives>>>
export type GetAllObjectivesQueryError = CustomProblemDetails


export function useGetAllObjectives<TData = Awaited<ReturnType<typeof getAllObjectives>>, TError = CustomProblemDetails>(
  options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof getAllObjectives>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getAllObjectives>>,
          TError,
          Awaited<ReturnType<typeof getAllObjectives>>
        > , 'initialData'
      >, }
 , queryClient?: QueryClient
  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useGetAllObjectives<TData = Awaited<ReturnType<typeof getAllObjectives>>, TError = CustomProblemDetails>(
  options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getAllObjectives>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getAllObjectives>>,
          TError,
          Awaited<ReturnType<typeof getAllObjectives>>
        > , 'initialData'
      >, }
 , queryClient?: QueryClient
  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useGetAllObjectives<TData = Awaited<ReturnType<typeof getAllObjectives>>, TError = CustomProblemDetails>(
  options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getAllObjectives>>, TError, TData>>, }
 , queryClient?: QueryClient
  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
/**
 * @summary Get all objectives
 */

export function useGetAllObjectives<TData = Awaited<ReturnType<typeof getAllObjectives>>, TError = CustomProblemDetails>(
  options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getAllObjectives>>, TError, TData>>, }
 , queryClient?: QueryClient 
 ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> } {

  const queryOptions = getGetAllObjectivesQueryOptions(options)

  const query = useQuery(queryOptions , queryClient) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}



/**
 * Create a new objective
 * @summary Create objective
 */
export const createObjective = (
    createObjectiveRequest: CreateObjectiveRequest,
 signal?: AbortSignal
) => {
      
      
      return customInstance<string>(
      {url: `/api/objectives`, method: 'POST',
      headers: {'Content-Type': 'application/json', },
      data: createObjectiveRequest, signal
    },
      );
    }
  


export const getCreateObjectiveMutationOptions = <TError = CustomProblemDetails,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof createObjective>>, TError,{data: CreateObjectiveRequest}, TContext>, }
): UseMutationOptions<Awaited<ReturnType<typeof createObjective>>, TError,{data: CreateObjectiveRequest}, TContext> => {
    
const mutationKey = ['createObjective'];
const {mutation: mutationOptions} = options ?
      options.mutation && 'mutationKey' in options.mutation && options.mutation.mutationKey ?
      options
      : {...options, mutation: {...options.mutation, mutationKey}}
      : {mutation: { mutationKey, }};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof createObjective>>, {data: CreateObjectiveRequest}> = (props) => {
          const {data} = props ?? {};

          return  createObjective(data,)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type CreateObjectiveMutationResult = NonNullable<Awaited<ReturnType<typeof createObjective>>>
    export type CreateObjectiveMutationBody = CreateObjectiveRequest
    export type CreateObjectiveMutationError = CustomProblemDetails

    /**
 * @summary Create objective
 */
export const useCreateObjective = <TError = CustomProblemDetails,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof createObjective>>, TError,{data: CreateObjectiveRequest}, TContext>, }
 , queryClient?: QueryClient): UseMutationResult<
        Awaited<ReturnType<typeof createObjective>>,
        TError,
        {data: CreateObjectiveRequest},
        TContext
      > => {

      const mutationOptions = getCreateObjectiveMutationOptions(options);

      return useMutation(mutationOptions , queryClient);
    }
    /**
 * Get a specific objective by ID
 * @summary Get objective by ID
 */
export const getObjectiveById = (
    id: string,
 signal?: AbortSignal
) => {
      
      
      return customInstance<ObjectiveDto>(
      {url: `/api/objectives/${id}`, method: 'GET', signal
    },
      );
    }
  

export const getGetObjectiveByIdQueryKey = (id: string,) => {
    return [`/api/objectives/${id}`] as const;
    }

    
export const getGetObjectiveByIdQueryOptions = <TData = Awaited<ReturnType<typeof getObjectiveById>>, TError = CustomProblemDetails>(id: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getObjectiveById>>, TError, TData>>, }
) => {

const {query: queryOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetObjectiveByIdQueryKey(id);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getObjectiveById>>> = ({ signal }) => getObjectiveById(id, signal);

      

      

   return  { queryKey, queryFn, enabled: !!(id), ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getObjectiveById>>, TError, TData> & { queryKey: DataTag<QueryKey, TData, TError> }
}

export type GetObjectiveByIdQueryResult = NonNullable<Awaited<ReturnType<typeof getObjectiveById>>>
export type GetObjectiveByIdQueryError = CustomProblemDetails


export function useGetObjectiveById<TData = Awaited<ReturnType<typeof getObjectiveById>>, TError = CustomProblemDetails>(
 id: string, options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof getObjectiveById>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getObjectiveById>>,
          TError,
          Awaited<ReturnType<typeof getObjectiveById>>
        > , 'initialData'
      >, }
 , queryClient?: QueryClient
  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useGetObjectiveById<TData = Awaited<ReturnType<typeof getObjectiveById>>, TError = CustomProblemDetails>(
 id: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getObjectiveById>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getObjectiveById>>,
          TError,
          Awaited<ReturnType<typeof getObjectiveById>>
        > , 'initialData'
      >, }
 , queryClient?: QueryClient
  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useGetObjectiveById<TData = Awaited<ReturnType<typeof getObjectiveById>>, TError = CustomProblemDetails>(
 id: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getObjectiveById>>, TError, TData>>, }
 , queryClient?: QueryClient
  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
/**
 * @summary Get objective by ID
 */

export function useGetObjectiveById<TData = Awaited<ReturnType<typeof getObjectiveById>>, TError = CustomProblemDetails>(
 id: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getObjectiveById>>, TError, TData>>, }
 , queryClient?: QueryClient 
 ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> } {

  const queryOptions = getGetObjectiveByIdQueryOptions(id,options)

  const query = useQuery(queryOptions , queryClient) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}



/**
 * Update an existing objective
 * @summary Update objective
 */
export const updateObjective = (
    id: string,
    updateObjectiveRequest: UpdateObjectiveRequest,
 ) => {
      
      
      return customInstance<void>(
      {url: `/api/objectives/${id}`, method: 'PUT',
      headers: {'Content-Type': 'application/json', },
      data: updateObjectiveRequest
    },
      );
    }
  


export const getUpdateObjectiveMutationOptions = <TError = CustomProblemDetails,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof updateObjective>>, TError,{id: string;data: UpdateObjectiveRequest}, TContext>, }
): UseMutationOptions<Awaited<ReturnType<typeof updateObjective>>, TError,{id: string;data: UpdateObjectiveRequest}, TContext> => {
    
const mutationKey = ['updateObjective'];
const {mutation: mutationOptions} = options ?
      options.mutation && 'mutationKey' in options.mutation && options.mutation.mutationKey ?
      options
      : {...options, mutation: {...options.mutation, mutationKey}}
      : {mutation: { mutationKey, }};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof updateObjective>>, {id: string;data: UpdateObjectiveRequest}> = (props) => {
          const {id,data} = props ?? {};

          return  updateObjective(id,data,)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type UpdateObjectiveMutationResult = NonNullable<Awaited<ReturnType<typeof updateObjective>>>
    export type UpdateObjectiveMutationBody = UpdateObjectiveRequest
    export type UpdateObjectiveMutationError = CustomProblemDetails

    /**
 * @summary Update objective
 */
export const useUpdateObjective = <TError = CustomProblemDetails,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof updateObjective>>, TError,{id: string;data: UpdateObjectiveRequest}, TContext>, }
 , queryClient?: QueryClient): UseMutationResult<
        Awaited<ReturnType<typeof updateObjective>>,
        TError,
        {id: string;data: UpdateObjectiveRequest},
        TContext
      > => {

      const mutationOptions = getUpdateObjectiveMutationOptions(options);

      return useMutation(mutationOptions , queryClient);
    }
    /**
 * Delete an objective and its actions
 * @summary Delete objective
 */
export const deleteObjective = (
    id: string,
 ) => {
      
      
      return customInstance<void>(
      {url: `/api/objectives/${id}`, method: 'DELETE'
    },
      );
    }
  


export const getDeleteObjectiveMutationOptions = <TError = ProblemDetails,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof deleteObjective>>, TError,{id: string}, TContext>, }
): UseMutationOptions<Awaited<ReturnType<typeof deleteObjective>>, TError,{id: string}, TContext> => {
    
const mutationKey = ['deleteObjective'];
const {mutation: mutationOptions} = options ?
      options.mutation && 'mutationKey' in options.mutation && options.mutation.mutationKey ?
      options
      : {...options, mutation: {...options.mutation, mutationKey}}
      : {mutation: { mutationKey, }};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof deleteObjective>>, {id: string}> = (props) => {
          const {id} = props ?? {};

          return  deleteObjective(id,)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type DeleteObjectiveMutationResult = NonNullable<Awaited<ReturnType<typeof deleteObjective>>>
    
    export type DeleteObjectiveMutationError = ProblemDetails

    /**
 * @summary Delete objective
 */
export const useDeleteObjective = <TError = ProblemDetails,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof deleteObjective>>, TError,{id: string}, TContext>, }
 , queryClient?: QueryClient): UseMutationResult<
        Awaited<ReturnType<typeof deleteObjective>>,
        TError,
        {id: string},
        TContext
      > => {

      const mutationOptions = getDeleteObjectiveMutationOptions(options);

      return useMutation(mutationOptions , queryClient);
    }
    /**
 * Duplicate all objectives and actions from a given year into a new one
 * @summary Duplicate objectives by year
 */
export const duplicateObjectivesByYear = (
    duplicateObjectivesRequest: DuplicateObjectivesRequest,
 signal?: AbortSignal
) => {
      
      
      return customInstance<void>(
      {url: `/api/objectives/duplicate`, method: 'POST',
      headers: {'Content-Type': 'application/json', },
      data: duplicateObjectivesRequest, signal
    },
      );
    }
  


export const getDuplicateObjectivesByYearMutationOptions = <TError = CustomProblemDetails,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof duplicateObjectivesByYear>>, TError,{data: DuplicateObjectivesRequest}, TContext>, }
): UseMutationOptions<Awaited<ReturnType<typeof duplicateObjectivesByYear>>, TError,{data: DuplicateObjectivesRequest}, TContext> => {
    
const mutationKey = ['duplicateObjectivesByYear'];
const {mutation: mutationOptions} = options ?
      options.mutation && 'mutationKey' in options.mutation && options.mutation.mutationKey ?
      options
      : {...options, mutation: {...options.mutation, mutationKey}}
      : {mutation: { mutationKey, }};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof duplicateObjectivesByYear>>, {data: DuplicateObjectivesRequest}> = (props) => {
          const {data} = props ?? {};

          return  duplicateObjectivesByYear(data,)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type DuplicateObjectivesByYearMutationResult = NonNullable<Awaited<ReturnType<typeof duplicateObjectivesByYear>>>
    export type DuplicateObjectivesByYearMutationBody = DuplicateObjectivesRequest
    export type DuplicateObjectivesByYearMutationError = CustomProblemDetails

    /**
 * @summary Duplicate objectives by year
 */
export const useDuplicateObjectivesByYear = <TError = CustomProblemDetails,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof duplicateObjectivesByYear>>, TError,{data: DuplicateObjectivesRequest}, TContext>, }
 , queryClient?: QueryClient): UseMutationResult<
        Awaited<ReturnType<typeof duplicateObjectivesByYear>>,
        TError,
        {data: DuplicateObjectivesRequest},
        TContext
      > => {

      const mutationOptions = getDuplicateObjectivesByYearMutationOptions(options);

      return useMutation(mutationOptions , queryClient);
    }
    