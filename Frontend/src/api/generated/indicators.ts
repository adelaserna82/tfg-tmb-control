/**
 * Generated by orval v7.8.0 🍺
 * Do not edit manually.
 * TMB Control API
 * OpenAPI spec version: v1
 */
import {
  useMutation,
  useQuery
} from '@tanstack/react-query';
import type {
  DataTag,
  DefinedInitialDataOptions,
  DefinedUseQueryResult,
  MutationFunction,
  QueryClient,
  QueryFunction,
  QueryKey,
  UndefinedInitialDataOptions,
  UseMutationOptions,
  UseMutationResult,
  UseQueryOptions,
  UseQueryResult
} from '@tanstack/react-query';

import type {
  CreateCategoryRequest,
  CreateIndicatorRequest,
  CustomProblemDetails,
  IndicatorDto,
  IndicatorHistoryDto,
  IndicatorsMasterDataDto,
  IngestIndicatorValueRequest,
  UpdateIndicatorRequest,
  UpdateIndicatorValueRequest
} from './model';

import { customInstance } from '../customInstance';





/**
 * Ping endpoint for the Indicators module
 * @summary Ping endpoint for the Indicators module
 */
export const pingIndicators = (
    
 signal?: AbortSignal
) => {
      
      
      return customInstance<unknown>(
      {url: `/api/indicators/ping`, method: 'GET', signal
    },
      );
    }
  

export const getPingIndicatorsQueryKey = () => {
    return [`/api/indicators/ping`] as const;
    }

    
export const getPingIndicatorsQueryOptions = <TData = Awaited<ReturnType<typeof pingIndicators>>, TError = CustomProblemDetails>( options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof pingIndicators>>, TError, TData>>, }
) => {

const {query: queryOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getPingIndicatorsQueryKey();

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof pingIndicators>>> = ({ signal }) => pingIndicators(signal);

      

      

   return  { queryKey, queryFn, ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof pingIndicators>>, TError, TData> & { queryKey: DataTag<QueryKey, TData, TError> }
}

export type PingIndicatorsQueryResult = NonNullable<Awaited<ReturnType<typeof pingIndicators>>>
export type PingIndicatorsQueryError = CustomProblemDetails


export function usePingIndicators<TData = Awaited<ReturnType<typeof pingIndicators>>, TError = CustomProblemDetails>(
  options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof pingIndicators>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof pingIndicators>>,
          TError,
          Awaited<ReturnType<typeof pingIndicators>>
        > , 'initialData'
      >, }
 , queryClient?: QueryClient
  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function usePingIndicators<TData = Awaited<ReturnType<typeof pingIndicators>>, TError = CustomProblemDetails>(
  options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof pingIndicators>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof pingIndicators>>,
          TError,
          Awaited<ReturnType<typeof pingIndicators>>
        > , 'initialData'
      >, }
 , queryClient?: QueryClient
  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function usePingIndicators<TData = Awaited<ReturnType<typeof pingIndicators>>, TError = CustomProblemDetails>(
  options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof pingIndicators>>, TError, TData>>, }
 , queryClient?: QueryClient
  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
/**
 * @summary Ping endpoint for the Indicators module
 */

export function usePingIndicators<TData = Awaited<ReturnType<typeof pingIndicators>>, TError = CustomProblemDetails>(
  options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof pingIndicators>>, TError, TData>>, }
 , queryClient?: QueryClient 
 ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> } {

  const queryOptions = getPingIndicatorsQueryOptions(options)

  const query = useQuery(queryOptions , queryClient) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}



/**
 * Get all indicators
 * @summary Get all indicators
 */
export const getAllIndicators = (
    
 signal?: AbortSignal
) => {
      
      
      return customInstance<IndicatorDto[]>(
      {url: `/api/indicators`, method: 'GET', signal
    },
      );
    }
  

export const getGetAllIndicatorsQueryKey = () => {
    return [`/api/indicators`] as const;
    }

    
export const getGetAllIndicatorsQueryOptions = <TData = Awaited<ReturnType<typeof getAllIndicators>>, TError = CustomProblemDetails>( options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getAllIndicators>>, TError, TData>>, }
) => {

const {query: queryOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetAllIndicatorsQueryKey();

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getAllIndicators>>> = ({ signal }) => getAllIndicators(signal);

      

      

   return  { queryKey, queryFn, ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getAllIndicators>>, TError, TData> & { queryKey: DataTag<QueryKey, TData, TError> }
}

export type GetAllIndicatorsQueryResult = NonNullable<Awaited<ReturnType<typeof getAllIndicators>>>
export type GetAllIndicatorsQueryError = CustomProblemDetails


export function useGetAllIndicators<TData = Awaited<ReturnType<typeof getAllIndicators>>, TError = CustomProblemDetails>(
  options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof getAllIndicators>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getAllIndicators>>,
          TError,
          Awaited<ReturnType<typeof getAllIndicators>>
        > , 'initialData'
      >, }
 , queryClient?: QueryClient
  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useGetAllIndicators<TData = Awaited<ReturnType<typeof getAllIndicators>>, TError = CustomProblemDetails>(
  options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getAllIndicators>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getAllIndicators>>,
          TError,
          Awaited<ReturnType<typeof getAllIndicators>>
        > , 'initialData'
      >, }
 , queryClient?: QueryClient
  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useGetAllIndicators<TData = Awaited<ReturnType<typeof getAllIndicators>>, TError = CustomProblemDetails>(
  options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getAllIndicators>>, TError, TData>>, }
 , queryClient?: QueryClient
  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
/**
 * @summary Get all indicators
 */

export function useGetAllIndicators<TData = Awaited<ReturnType<typeof getAllIndicators>>, TError = CustomProblemDetails>(
  options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getAllIndicators>>, TError, TData>>, }
 , queryClient?: QueryClient 
 ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> } {

  const queryOptions = getGetAllIndicatorsQueryOptions(options)

  const query = useQuery(queryOptions , queryClient) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}



/**
 * Create a new indicator
 * @summary Create a new indicator
 */
export const createIndicator = (
    createIndicatorRequest: CreateIndicatorRequest,
 signal?: AbortSignal
) => {
      
      
      return customInstance<string>(
      {url: `/api/indicators`, method: 'POST',
      headers: {'Content-Type': 'application/json', },
      data: createIndicatorRequest, signal
    },
      );
    }
  


export const getCreateIndicatorMutationOptions = <TError = CustomProblemDetails,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof createIndicator>>, TError,{data: CreateIndicatorRequest}, TContext>, }
): UseMutationOptions<Awaited<ReturnType<typeof createIndicator>>, TError,{data: CreateIndicatorRequest}, TContext> => {
    
const mutationKey = ['createIndicator'];
const {mutation: mutationOptions} = options ?
      options.mutation && 'mutationKey' in options.mutation && options.mutation.mutationKey ?
      options
      : {...options, mutation: {...options.mutation, mutationKey}}
      : {mutation: { mutationKey, }};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof createIndicator>>, {data: CreateIndicatorRequest}> = (props) => {
          const {data} = props ?? {};

          return  createIndicator(data,)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type CreateIndicatorMutationResult = NonNullable<Awaited<ReturnType<typeof createIndicator>>>
    export type CreateIndicatorMutationBody = CreateIndicatorRequest
    export type CreateIndicatorMutationError = CustomProblemDetails

    /**
 * @summary Create a new indicator
 */
export const useCreateIndicator = <TError = CustomProblemDetails,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof createIndicator>>, TError,{data: CreateIndicatorRequest}, TContext>, }
 , queryClient?: QueryClient): UseMutationResult<
        Awaited<ReturnType<typeof createIndicator>>,
        TError,
        {data: CreateIndicatorRequest},
        TContext
      > => {

      const mutationOptions = getCreateIndicatorMutationOptions(options);

      return useMutation(mutationOptions , queryClient);
    }
    /**
 * Get all indicators including history
 * @summary Get all indicators with history
 */
export const getAllIndicatorsWithHistory = (
    
 signal?: AbortSignal
) => {
      
      
      return customInstance<IndicatorDto[]>(
      {url: `/api/indicators/with-history`, method: 'GET', signal
    },
      );
    }
  

export const getGetAllIndicatorsWithHistoryQueryKey = () => {
    return [`/api/indicators/with-history`] as const;
    }

    
export const getGetAllIndicatorsWithHistoryQueryOptions = <TData = Awaited<ReturnType<typeof getAllIndicatorsWithHistory>>, TError = CustomProblemDetails>( options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getAllIndicatorsWithHistory>>, TError, TData>>, }
) => {

const {query: queryOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetAllIndicatorsWithHistoryQueryKey();

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getAllIndicatorsWithHistory>>> = ({ signal }) => getAllIndicatorsWithHistory(signal);

      

      

   return  { queryKey, queryFn, ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getAllIndicatorsWithHistory>>, TError, TData> & { queryKey: DataTag<QueryKey, TData, TError> }
}

export type GetAllIndicatorsWithHistoryQueryResult = NonNullable<Awaited<ReturnType<typeof getAllIndicatorsWithHistory>>>
export type GetAllIndicatorsWithHistoryQueryError = CustomProblemDetails


export function useGetAllIndicatorsWithHistory<TData = Awaited<ReturnType<typeof getAllIndicatorsWithHistory>>, TError = CustomProblemDetails>(
  options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof getAllIndicatorsWithHistory>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getAllIndicatorsWithHistory>>,
          TError,
          Awaited<ReturnType<typeof getAllIndicatorsWithHistory>>
        > , 'initialData'
      >, }
 , queryClient?: QueryClient
  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useGetAllIndicatorsWithHistory<TData = Awaited<ReturnType<typeof getAllIndicatorsWithHistory>>, TError = CustomProblemDetails>(
  options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getAllIndicatorsWithHistory>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getAllIndicatorsWithHistory>>,
          TError,
          Awaited<ReturnType<typeof getAllIndicatorsWithHistory>>
        > , 'initialData'
      >, }
 , queryClient?: QueryClient
  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useGetAllIndicatorsWithHistory<TData = Awaited<ReturnType<typeof getAllIndicatorsWithHistory>>, TError = CustomProblemDetails>(
  options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getAllIndicatorsWithHistory>>, TError, TData>>, }
 , queryClient?: QueryClient
  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
/**
 * @summary Get all indicators with history
 */

export function useGetAllIndicatorsWithHistory<TData = Awaited<ReturnType<typeof getAllIndicatorsWithHistory>>, TError = CustomProblemDetails>(
  options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getAllIndicatorsWithHistory>>, TError, TData>>, }
 , queryClient?: QueryClient 
 ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> } {

  const queryOptions = getGetAllIndicatorsWithHistoryQueryOptions(options)

  const query = useQuery(queryOptions , queryClient) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}



/**
 * Get indicators by category
 * @summary Get indicators by category
 */
export const getIndicatorsByCategory = (
    categoryId: number,
 signal?: AbortSignal
) => {
      
      
      return customInstance<IndicatorDto[]>(
      {url: `/api/indicators/category/${categoryId}`, method: 'GET', signal
    },
      );
    }
  

export const getGetIndicatorsByCategoryQueryKey = (categoryId: number,) => {
    return [`/api/indicators/category/${categoryId}`] as const;
    }

    
export const getGetIndicatorsByCategoryQueryOptions = <TData = Awaited<ReturnType<typeof getIndicatorsByCategory>>, TError = CustomProblemDetails>(categoryId: number, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getIndicatorsByCategory>>, TError, TData>>, }
) => {

const {query: queryOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetIndicatorsByCategoryQueryKey(categoryId);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getIndicatorsByCategory>>> = ({ signal }) => getIndicatorsByCategory(categoryId, signal);

      

      

   return  { queryKey, queryFn, enabled: !!(categoryId), ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getIndicatorsByCategory>>, TError, TData> & { queryKey: DataTag<QueryKey, TData, TError> }
}

export type GetIndicatorsByCategoryQueryResult = NonNullable<Awaited<ReturnType<typeof getIndicatorsByCategory>>>
export type GetIndicatorsByCategoryQueryError = CustomProblemDetails


export function useGetIndicatorsByCategory<TData = Awaited<ReturnType<typeof getIndicatorsByCategory>>, TError = CustomProblemDetails>(
 categoryId: number, options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof getIndicatorsByCategory>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getIndicatorsByCategory>>,
          TError,
          Awaited<ReturnType<typeof getIndicatorsByCategory>>
        > , 'initialData'
      >, }
 , queryClient?: QueryClient
  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useGetIndicatorsByCategory<TData = Awaited<ReturnType<typeof getIndicatorsByCategory>>, TError = CustomProblemDetails>(
 categoryId: number, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getIndicatorsByCategory>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getIndicatorsByCategory>>,
          TError,
          Awaited<ReturnType<typeof getIndicatorsByCategory>>
        > , 'initialData'
      >, }
 , queryClient?: QueryClient
  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useGetIndicatorsByCategory<TData = Awaited<ReturnType<typeof getIndicatorsByCategory>>, TError = CustomProblemDetails>(
 categoryId: number, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getIndicatorsByCategory>>, TError, TData>>, }
 , queryClient?: QueryClient
  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
/**
 * @summary Get indicators by category
 */

export function useGetIndicatorsByCategory<TData = Awaited<ReturnType<typeof getIndicatorsByCategory>>, TError = CustomProblemDetails>(
 categoryId: number, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getIndicatorsByCategory>>, TError, TData>>, }
 , queryClient?: QueryClient 
 ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> } {

  const queryOptions = getGetIndicatorsByCategoryQueryOptions(categoryId,options)

  const query = useQuery(queryOptions , queryClient) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}



/**
 * Get indicators by category including history
 * @summary Get indicators by category with history
 */
export const getIndicatorsByCategoryWithHistory = (
    categoryId: number,
 signal?: AbortSignal
) => {
      
      
      return customInstance<IndicatorDto[]>(
      {url: `/api/indicators/category/${categoryId}/with-history`, method: 'GET', signal
    },
      );
    }
  

export const getGetIndicatorsByCategoryWithHistoryQueryKey = (categoryId: number,) => {
    return [`/api/indicators/category/${categoryId}/with-history`] as const;
    }

    
export const getGetIndicatorsByCategoryWithHistoryQueryOptions = <TData = Awaited<ReturnType<typeof getIndicatorsByCategoryWithHistory>>, TError = CustomProblemDetails>(categoryId: number, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getIndicatorsByCategoryWithHistory>>, TError, TData>>, }
) => {

const {query: queryOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetIndicatorsByCategoryWithHistoryQueryKey(categoryId);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getIndicatorsByCategoryWithHistory>>> = ({ signal }) => getIndicatorsByCategoryWithHistory(categoryId, signal);

      

      

   return  { queryKey, queryFn, enabled: !!(categoryId), ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getIndicatorsByCategoryWithHistory>>, TError, TData> & { queryKey: DataTag<QueryKey, TData, TError> }
}

export type GetIndicatorsByCategoryWithHistoryQueryResult = NonNullable<Awaited<ReturnType<typeof getIndicatorsByCategoryWithHistory>>>
export type GetIndicatorsByCategoryWithHistoryQueryError = CustomProblemDetails


export function useGetIndicatorsByCategoryWithHistory<TData = Awaited<ReturnType<typeof getIndicatorsByCategoryWithHistory>>, TError = CustomProblemDetails>(
 categoryId: number, options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof getIndicatorsByCategoryWithHistory>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getIndicatorsByCategoryWithHistory>>,
          TError,
          Awaited<ReturnType<typeof getIndicatorsByCategoryWithHistory>>
        > , 'initialData'
      >, }
 , queryClient?: QueryClient
  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useGetIndicatorsByCategoryWithHistory<TData = Awaited<ReturnType<typeof getIndicatorsByCategoryWithHistory>>, TError = CustomProblemDetails>(
 categoryId: number, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getIndicatorsByCategoryWithHistory>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getIndicatorsByCategoryWithHistory>>,
          TError,
          Awaited<ReturnType<typeof getIndicatorsByCategoryWithHistory>>
        > , 'initialData'
      >, }
 , queryClient?: QueryClient
  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useGetIndicatorsByCategoryWithHistory<TData = Awaited<ReturnType<typeof getIndicatorsByCategoryWithHistory>>, TError = CustomProblemDetails>(
 categoryId: number, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getIndicatorsByCategoryWithHistory>>, TError, TData>>, }
 , queryClient?: QueryClient
  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
/**
 * @summary Get indicators by category with history
 */

export function useGetIndicatorsByCategoryWithHistory<TData = Awaited<ReturnType<typeof getIndicatorsByCategoryWithHistory>>, TError = CustomProblemDetails>(
 categoryId: number, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getIndicatorsByCategoryWithHistory>>, TError, TData>>, }
 , queryClient?: QueryClient 
 ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> } {

  const queryOptions = getGetIndicatorsByCategoryWithHistoryQueryOptions(categoryId,options)

  const query = useQuery(queryOptions , queryClient) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}



/**
 * Update an existing indicator
 * @summary Update an existing indicator
 */
export const updateIndicator = (
    id: string,
    updateIndicatorRequest: UpdateIndicatorRequest,
 ) => {
      
      
      return customInstance<void>(
      {url: `/api/indicators/${id}`, method: 'PUT',
      headers: {'Content-Type': 'application/json', },
      data: updateIndicatorRequest
    },
      );
    }
  


export const getUpdateIndicatorMutationOptions = <TError = CustomProblemDetails,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof updateIndicator>>, TError,{id: string;data: UpdateIndicatorRequest}, TContext>, }
): UseMutationOptions<Awaited<ReturnType<typeof updateIndicator>>, TError,{id: string;data: UpdateIndicatorRequest}, TContext> => {
    
const mutationKey = ['updateIndicator'];
const {mutation: mutationOptions} = options ?
      options.mutation && 'mutationKey' in options.mutation && options.mutation.mutationKey ?
      options
      : {...options, mutation: {...options.mutation, mutationKey}}
      : {mutation: { mutationKey, }};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof updateIndicator>>, {id: string;data: UpdateIndicatorRequest}> = (props) => {
          const {id,data} = props ?? {};

          return  updateIndicator(id,data,)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type UpdateIndicatorMutationResult = NonNullable<Awaited<ReturnType<typeof updateIndicator>>>
    export type UpdateIndicatorMutationBody = UpdateIndicatorRequest
    export type UpdateIndicatorMutationError = CustomProblemDetails

    /**
 * @summary Update an existing indicator
 */
export const useUpdateIndicator = <TError = CustomProblemDetails,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof updateIndicator>>, TError,{id: string;data: UpdateIndicatorRequest}, TContext>, }
 , queryClient?: QueryClient): UseMutationResult<
        Awaited<ReturnType<typeof updateIndicator>>,
        TError,
        {id: string;data: UpdateIndicatorRequest},
        TContext
      > => {

      const mutationOptions = getUpdateIndicatorMutationOptions(options);

      return useMutation(mutationOptions , queryClient);
    }
    /**
 * Delete an indicator
 * @summary Delete an indicator
 */
export const deleteIndicator = (
    id: string,
 ) => {
      
      
      return customInstance<void>(
      {url: `/api/indicators/${id}`, method: 'DELETE'
    },
      );
    }
  


export const getDeleteIndicatorMutationOptions = <TError = CustomProblemDetails,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof deleteIndicator>>, TError,{id: string}, TContext>, }
): UseMutationOptions<Awaited<ReturnType<typeof deleteIndicator>>, TError,{id: string}, TContext> => {
    
const mutationKey = ['deleteIndicator'];
const {mutation: mutationOptions} = options ?
      options.mutation && 'mutationKey' in options.mutation && options.mutation.mutationKey ?
      options
      : {...options, mutation: {...options.mutation, mutationKey}}
      : {mutation: { mutationKey, }};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof deleteIndicator>>, {id: string}> = (props) => {
          const {id} = props ?? {};

          return  deleteIndicator(id,)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type DeleteIndicatorMutationResult = NonNullable<Awaited<ReturnType<typeof deleteIndicator>>>
    
    export type DeleteIndicatorMutationError = CustomProblemDetails

    /**
 * @summary Delete an indicator
 */
export const useDeleteIndicator = <TError = CustomProblemDetails,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof deleteIndicator>>, TError,{id: string}, TContext>, }
 , queryClient?: QueryClient): UseMutationResult<
        Awaited<ReturnType<typeof deleteIndicator>>,
        TError,
        {id: string},
        TContext
      > => {

      const mutationOptions = getDeleteIndicatorMutationOptions(options);

      return useMutation(mutationOptions , queryClient);
    }
    /**
 * Get an indicator by ID
 * @summary Get an indicator by ID
 */
export const getIndicatorById = (
    id: string,
 signal?: AbortSignal
) => {
      
      
      return customInstance<IndicatorDto>(
      {url: `/api/indicators/${id}`, method: 'GET', signal
    },
      );
    }
  

export const getGetIndicatorByIdQueryKey = (id: string,) => {
    return [`/api/indicators/${id}`] as const;
    }

    
export const getGetIndicatorByIdQueryOptions = <TData = Awaited<ReturnType<typeof getIndicatorById>>, TError = CustomProblemDetails>(id: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getIndicatorById>>, TError, TData>>, }
) => {

const {query: queryOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetIndicatorByIdQueryKey(id);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getIndicatorById>>> = ({ signal }) => getIndicatorById(id, signal);

      

      

   return  { queryKey, queryFn, enabled: !!(id), ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getIndicatorById>>, TError, TData> & { queryKey: DataTag<QueryKey, TData, TError> }
}

export type GetIndicatorByIdQueryResult = NonNullable<Awaited<ReturnType<typeof getIndicatorById>>>
export type GetIndicatorByIdQueryError = CustomProblemDetails


export function useGetIndicatorById<TData = Awaited<ReturnType<typeof getIndicatorById>>, TError = CustomProblemDetails>(
 id: string, options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof getIndicatorById>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getIndicatorById>>,
          TError,
          Awaited<ReturnType<typeof getIndicatorById>>
        > , 'initialData'
      >, }
 , queryClient?: QueryClient
  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useGetIndicatorById<TData = Awaited<ReturnType<typeof getIndicatorById>>, TError = CustomProblemDetails>(
 id: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getIndicatorById>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getIndicatorById>>,
          TError,
          Awaited<ReturnType<typeof getIndicatorById>>
        > , 'initialData'
      >, }
 , queryClient?: QueryClient
  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useGetIndicatorById<TData = Awaited<ReturnType<typeof getIndicatorById>>, TError = CustomProblemDetails>(
 id: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getIndicatorById>>, TError, TData>>, }
 , queryClient?: QueryClient
  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
/**
 * @summary Get an indicator by ID
 */

export function useGetIndicatorById<TData = Awaited<ReturnType<typeof getIndicatorById>>, TError = CustomProblemDetails>(
 id: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getIndicatorById>>, TError, TData>>, }
 , queryClient?: QueryClient 
 ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> } {

  const queryOptions = getGetIndicatorByIdQueryOptions(id,options)

  const query = useQuery(queryOptions , queryClient) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}



/**
 * Get full history of an indicator
 * @summary Get indicator history
 */
export const getIndicatorHistory = (
    id: string,
 signal?: AbortSignal
) => {
      
      
      return customInstance<IndicatorHistoryDto[]>(
      {url: `/api/indicators/${id}/history`, method: 'GET', signal
    },
      );
    }
  

export const getGetIndicatorHistoryQueryKey = (id: string,) => {
    return [`/api/indicators/${id}/history`] as const;
    }

    
export const getGetIndicatorHistoryQueryOptions = <TData = Awaited<ReturnType<typeof getIndicatorHistory>>, TError = CustomProblemDetails>(id: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getIndicatorHistory>>, TError, TData>>, }
) => {

const {query: queryOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetIndicatorHistoryQueryKey(id);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getIndicatorHistory>>> = ({ signal }) => getIndicatorHistory(id, signal);

      

      

   return  { queryKey, queryFn, enabled: !!(id), ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getIndicatorHistory>>, TError, TData> & { queryKey: DataTag<QueryKey, TData, TError> }
}

export type GetIndicatorHistoryQueryResult = NonNullable<Awaited<ReturnType<typeof getIndicatorHistory>>>
export type GetIndicatorHistoryQueryError = CustomProblemDetails


export function useGetIndicatorHistory<TData = Awaited<ReturnType<typeof getIndicatorHistory>>, TError = CustomProblemDetails>(
 id: string, options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof getIndicatorHistory>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getIndicatorHistory>>,
          TError,
          Awaited<ReturnType<typeof getIndicatorHistory>>
        > , 'initialData'
      >, }
 , queryClient?: QueryClient
  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useGetIndicatorHistory<TData = Awaited<ReturnType<typeof getIndicatorHistory>>, TError = CustomProblemDetails>(
 id: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getIndicatorHistory>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getIndicatorHistory>>,
          TError,
          Awaited<ReturnType<typeof getIndicatorHistory>>
        > , 'initialData'
      >, }
 , queryClient?: QueryClient
  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useGetIndicatorHistory<TData = Awaited<ReturnType<typeof getIndicatorHistory>>, TError = CustomProblemDetails>(
 id: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getIndicatorHistory>>, TError, TData>>, }
 , queryClient?: QueryClient
  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
/**
 * @summary Get indicator history
 */

export function useGetIndicatorHistory<TData = Awaited<ReturnType<typeof getIndicatorHistory>>, TError = CustomProblemDetails>(
 id: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getIndicatorHistory>>, TError, TData>>, }
 , queryClient?: QueryClient 
 ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> } {

  const queryOptions = getGetIndicatorHistoryQueryOptions(id,options)

  const query = useQuery(queryOptions , queryClient) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}



/**
 * Update only the value of an indicator and create historical entry
 * @summary Update value and record in history
 */
export const updateIndicatorValue = (
    id: string,
    updateIndicatorValueRequest: UpdateIndicatorValueRequest,
 ) => {
      
      
      return customInstance<void>(
      {url: `/api/indicators/${id}/value`, method: 'PATCH',
      headers: {'Content-Type': 'application/json', },
      data: updateIndicatorValueRequest
    },
      );
    }
  


export const getUpdateIndicatorValueMutationOptions = <TError = CustomProblemDetails,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof updateIndicatorValue>>, TError,{id: string;data: UpdateIndicatorValueRequest}, TContext>, }
): UseMutationOptions<Awaited<ReturnType<typeof updateIndicatorValue>>, TError,{id: string;data: UpdateIndicatorValueRequest}, TContext> => {
    
const mutationKey = ['updateIndicatorValue'];
const {mutation: mutationOptions} = options ?
      options.mutation && 'mutationKey' in options.mutation && options.mutation.mutationKey ?
      options
      : {...options, mutation: {...options.mutation, mutationKey}}
      : {mutation: { mutationKey, }};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof updateIndicatorValue>>, {id: string;data: UpdateIndicatorValueRequest}> = (props) => {
          const {id,data} = props ?? {};

          return  updateIndicatorValue(id,data,)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type UpdateIndicatorValueMutationResult = NonNullable<Awaited<ReturnType<typeof updateIndicatorValue>>>
    export type UpdateIndicatorValueMutationBody = UpdateIndicatorValueRequest
    export type UpdateIndicatorValueMutationError = CustomProblemDetails

    /**
 * @summary Update value and record in history
 */
export const useUpdateIndicatorValue = <TError = CustomProblemDetails,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof updateIndicatorValue>>, TError,{id: string;data: UpdateIndicatorValueRequest}, TContext>, }
 , queryClient?: QueryClient): UseMutationResult<
        Awaited<ReturnType<typeof updateIndicatorValue>>,
        TError,
        {id: string;data: UpdateIndicatorValueRequest},
        TContext
      > => {

      const mutationOptions = getUpdateIndicatorValueMutationOptions(options);

      return useMutation(mutationOptions , queryClient);
    }
    /**
 * Insert or update values for multiple indicators and generate history
 * @summary Bulk update of indicator values
 */
export const ingestManyIndicatorValues = (
    ingestIndicatorValueRequest: IngestIndicatorValueRequest[],
 signal?: AbortSignal
) => {
      
      
      return customInstance<void>(
      {url: `/api/indicators/ingest-many`, method: 'POST',
      headers: {'Content-Type': 'application/json', },
      data: ingestIndicatorValueRequest, signal
    },
      );
    }
  


export const getIngestManyIndicatorValuesMutationOptions = <TError = CustomProblemDetails,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof ingestManyIndicatorValues>>, TError,{data: IngestIndicatorValueRequest[]}, TContext>, }
): UseMutationOptions<Awaited<ReturnType<typeof ingestManyIndicatorValues>>, TError,{data: IngestIndicatorValueRequest[]}, TContext> => {
    
const mutationKey = ['ingestManyIndicatorValues'];
const {mutation: mutationOptions} = options ?
      options.mutation && 'mutationKey' in options.mutation && options.mutation.mutationKey ?
      options
      : {...options, mutation: {...options.mutation, mutationKey}}
      : {mutation: { mutationKey, }};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof ingestManyIndicatorValues>>, {data: IngestIndicatorValueRequest[]}> = (props) => {
          const {data} = props ?? {};

          return  ingestManyIndicatorValues(data,)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type IngestManyIndicatorValuesMutationResult = NonNullable<Awaited<ReturnType<typeof ingestManyIndicatorValues>>>
    export type IngestManyIndicatorValuesMutationBody = IngestIndicatorValueRequest[]
    export type IngestManyIndicatorValuesMutationError = CustomProblemDetails

    /**
 * @summary Bulk update of indicator values
 */
export const useIngestManyIndicatorValues = <TError = CustomProblemDetails,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof ingestManyIndicatorValues>>, TError,{data: IngestIndicatorValueRequest[]}, TContext>, }
 , queryClient?: QueryClient): UseMutationResult<
        Awaited<ReturnType<typeof ingestManyIndicatorValues>>,
        TError,
        {data: IngestIndicatorValueRequest[]},
        TContext
      > => {

      const mutationOptions = getIngestManyIndicatorValuesMutationOptions(options);

      return useMutation(mutationOptions , queryClient);
    }
    /**
 * Get master data for indicators module
 * @summary Get indicator categories and frequencies
 */
export const getIndicatorMasterData = (
    
 signal?: AbortSignal
) => {
      
      
      return customInstance<IndicatorsMasterDataDto>(
      {url: `/api/indicators/master-data`, method: 'GET', signal
    },
      );
    }
  

export const getGetIndicatorMasterDataQueryKey = () => {
    return [`/api/indicators/master-data`] as const;
    }

    
export const getGetIndicatorMasterDataQueryOptions = <TData = Awaited<ReturnType<typeof getIndicatorMasterData>>, TError = CustomProblemDetails>( options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getIndicatorMasterData>>, TError, TData>>, }
) => {

const {query: queryOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetIndicatorMasterDataQueryKey();

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getIndicatorMasterData>>> = ({ signal }) => getIndicatorMasterData(signal);

      

      

   return  { queryKey, queryFn, ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getIndicatorMasterData>>, TError, TData> & { queryKey: DataTag<QueryKey, TData, TError> }
}

export type GetIndicatorMasterDataQueryResult = NonNullable<Awaited<ReturnType<typeof getIndicatorMasterData>>>
export type GetIndicatorMasterDataQueryError = CustomProblemDetails


export function useGetIndicatorMasterData<TData = Awaited<ReturnType<typeof getIndicatorMasterData>>, TError = CustomProblemDetails>(
  options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof getIndicatorMasterData>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getIndicatorMasterData>>,
          TError,
          Awaited<ReturnType<typeof getIndicatorMasterData>>
        > , 'initialData'
      >, }
 , queryClient?: QueryClient
  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useGetIndicatorMasterData<TData = Awaited<ReturnType<typeof getIndicatorMasterData>>, TError = CustomProblemDetails>(
  options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getIndicatorMasterData>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getIndicatorMasterData>>,
          TError,
          Awaited<ReturnType<typeof getIndicatorMasterData>>
        > , 'initialData'
      >, }
 , queryClient?: QueryClient
  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useGetIndicatorMasterData<TData = Awaited<ReturnType<typeof getIndicatorMasterData>>, TError = CustomProblemDetails>(
  options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getIndicatorMasterData>>, TError, TData>>, }
 , queryClient?: QueryClient
  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
/**
 * @summary Get indicator categories and frequencies
 */

export function useGetIndicatorMasterData<TData = Awaited<ReturnType<typeof getIndicatorMasterData>>, TError = CustomProblemDetails>(
  options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getIndicatorMasterData>>, TError, TData>>, }
 , queryClient?: QueryClient 
 ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> } {

  const queryOptions = getGetIndicatorMasterDataQueryOptions(options)

  const query = useQuery(queryOptions , queryClient) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}



/**
 * Create a new indicator category
 * @summary Create a new indicator category
 */
export const createCategory = (
    createCategoryRequest: CreateCategoryRequest,
 signal?: AbortSignal
) => {
      
      
      return customInstance<number>(
      {url: `/api/indicators/categories`, method: 'POST',
      headers: {'Content-Type': 'application/json', },
      data: createCategoryRequest, signal
    },
      );
    }
  


export const getCreateCategoryMutationOptions = <TError = CustomProblemDetails,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof createCategory>>, TError,{data: CreateCategoryRequest}, TContext>, }
): UseMutationOptions<Awaited<ReturnType<typeof createCategory>>, TError,{data: CreateCategoryRequest}, TContext> => {
    
const mutationKey = ['createCategory'];
const {mutation: mutationOptions} = options ?
      options.mutation && 'mutationKey' in options.mutation && options.mutation.mutationKey ?
      options
      : {...options, mutation: {...options.mutation, mutationKey}}
      : {mutation: { mutationKey, }};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof createCategory>>, {data: CreateCategoryRequest}> = (props) => {
          const {data} = props ?? {};

          return  createCategory(data,)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type CreateCategoryMutationResult = NonNullable<Awaited<ReturnType<typeof createCategory>>>
    export type CreateCategoryMutationBody = CreateCategoryRequest
    export type CreateCategoryMutationError = CustomProblemDetails

    /**
 * @summary Create a new indicator category
 */
export const useCreateCategory = <TError = CustomProblemDetails,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof createCategory>>, TError,{data: CreateCategoryRequest}, TContext>, }
 , queryClient?: QueryClient): UseMutationResult<
        Awaited<ReturnType<typeof createCategory>>,
        TError,
        {data: CreateCategoryRequest},
        TContext
      > => {

      const mutationOptions = getCreateCategoryMutationOptions(options);

      return useMutation(mutationOptions , queryClient);
    }
    