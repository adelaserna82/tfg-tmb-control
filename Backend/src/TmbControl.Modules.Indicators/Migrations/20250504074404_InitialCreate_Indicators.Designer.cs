// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;
using TmbControl.Modules.Indicators.Persistence;

#nullable disable

namespace TmbControl.Modules.Indicators.Migrations
{
    [DbContext(typeof(IndicatorsDbContext))]
    [Migration("20250504074404_InitialCreate_Indicators")]
    partial class InitialCreate_Indicators
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasDefaultSchema("indicators")
                .HasAnnotation("ProductVersion", "8.0.4")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("TmbControl.Modules.Indicators.Entities.Category", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_at");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("created_by");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("description");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("name");

                    b.Property<int>("Order")
                        .HasColumnType("integer")
                        .HasColumnName("order");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("updated_at");

                    b.Property<string>("UpdatedBy")
                        .HasColumnType("text")
                        .HasColumnName("updated_by");

                    b.HasKey("Id")
                        .HasName("pk_categories");

                    b.ToTable("categories", "indicators");
                });

            modelBuilder.Entity("TmbControl.Modules.Indicators.Entities.Frequency", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_at");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("created_by");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("description");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("name");

                    b.Property<int>("Order")
                        .HasColumnType("integer")
                        .HasColumnName("order");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("updated_at");

                    b.Property<string>("UpdatedBy")
                        .HasColumnType("text")
                        .HasColumnName("updated_by");

                    b.HasKey("Id")
                        .HasName("pk_frequencies");

                    b.ToTable("frequencies", "indicators");
                });

            modelBuilder.Entity("TmbControl.Modules.Indicators.Entities.Indicator", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<int>("CategoryId")
                        .HasColumnType("integer")
                        .HasColumnName("category_id");

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("code");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_at");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("created_by");

                    b.Property<DateOnly?>("Date")
                        .HasColumnType("date")
                        .HasColumnName("date");

                    b.Property<string>("Description")
                        .HasColumnType("text")
                        .HasColumnName("description");

                    b.Property<int>("FrequencyId")
                        .HasColumnType("integer")
                        .HasColumnName("frequency_id");

                    b.Property<bool>("IsAlertConfigured")
                        .HasColumnType("boolean")
                        .HasColumnName("is_alert_configured");

                    b.Property<bool>("IsErrorConfigured")
                        .HasColumnType("boolean")
                        .HasColumnName("is_error_configured");

                    b.Property<double>("Max")
                        .HasColumnType("double precision")
                        .HasColumnName("max");

                    b.Property<double?>("MaxAlert")
                        .HasColumnType("double precision")
                        .HasColumnName("max_alert");

                    b.Property<double?>("MaxError")
                        .HasColumnType("double precision")
                        .HasColumnName("max_error");

                    b.Property<double>("Min")
                        .HasColumnType("double precision")
                        .HasColumnName("min");

                    b.Property<double?>("MinAlert")
                        .HasColumnType("double precision")
                        .HasColumnName("min_alert");

                    b.Property<double?>("MinError")
                        .HasColumnType("double precision")
                        .HasColumnName("min_error");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("name");

                    b.Property<int>("StatusId")
                        .HasColumnType("integer")
                        .HasColumnName("status_id");

                    b.Property<string>("Unit")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("unit");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("updated_at");

                    b.Property<string>("UpdatedBy")
                        .HasColumnType("text")
                        .HasColumnName("updated_by");

                    b.Property<double?>("Value")
                        .HasColumnType("double precision")
                        .HasColumnName("value");

                    b.Property<double>("XLocation")
                        .HasColumnType("double precision")
                        .HasColumnName("x_location");

                    b.Property<double>("YLocation")
                        .HasColumnType("double precision")
                        .HasColumnName("y_location");

                    b.HasKey("Id")
                        .HasName("pk_indicators");

                    b.HasIndex("CategoryId")
                        .HasDatabaseName("ix_indicators_category_id");

                    b.HasIndex("FrequencyId")
                        .HasDatabaseName("ix_indicators_frequency_id");

                    b.HasIndex("StatusId")
                        .HasDatabaseName("ix_indicators_status_id");

                    b.ToTable("indicators", "indicators");
                });

            modelBuilder.Entity("TmbControl.Modules.Indicators.Entities.IndicatorHistory", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<Guid>("IndicatorId")
                        .HasColumnType("uuid")
                        .HasColumnName("indicator_id");

                    b.Property<int>("StatusId")
                        .HasColumnType("integer")
                        .HasColumnName("status_id");

                    b.Property<DateTime>("Timestamp")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("timestamp");

                    b.Property<double>("Value")
                        .HasColumnType("double precision")
                        .HasColumnName("value");

                    b.HasKey("Id")
                        .HasName("pk_indicator_histories");

                    b.HasIndex("IndicatorId")
                        .HasDatabaseName("ix_indicator_histories_indicator_id");

                    b.HasIndex("StatusId")
                        .HasDatabaseName("ix_indicator_histories_status_id");

                    b.ToTable("indicator_histories", "indicators");
                });

            modelBuilder.Entity("TmbControl.Modules.Indicators.Entities.Status", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_at");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("created_by");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("name");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("updated_at");

                    b.Property<string>("UpdatedBy")
                        .HasColumnType("text")
                        .HasColumnName("updated_by");

                    b.HasKey("Id")
                        .HasName("pk_statuses");

                    b.ToTable("statuses", "indicators");
                });

            modelBuilder.Entity("TmbControl.Modules.Indicators.Entities.Indicator", b =>
                {
                    b.HasOne("TmbControl.Modules.Indicators.Entities.Category", "Category")
                        .WithMany("Indicators")
                        .HasForeignKey("CategoryId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired()
                        .HasConstraintName("fk_indicators_categories_category_id");

                    b.HasOne("TmbControl.Modules.Indicators.Entities.Frequency", "Frequency")
                        .WithMany("Indicators")
                        .HasForeignKey("FrequencyId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired()
                        .HasConstraintName("fk_indicators_frequencies_frequency_id");

                    b.HasOne("TmbControl.Modules.Indicators.Entities.Status", "Status")
                        .WithMany("Indicators")
                        .HasForeignKey("StatusId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired()
                        .HasConstraintName("fk_indicators_statuses_status_id");

                    b.Navigation("Category");

                    b.Navigation("Frequency");

                    b.Navigation("Status");
                });

            modelBuilder.Entity("TmbControl.Modules.Indicators.Entities.IndicatorHistory", b =>
                {
                    b.HasOne("TmbControl.Modules.Indicators.Entities.Indicator", "Indicator")
                        .WithMany("Histories")
                        .HasForeignKey("IndicatorId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_indicator_histories_indicators_indicator_id");

                    b.HasOne("TmbControl.Modules.Indicators.Entities.Status", "Status")
                        .WithMany()
                        .HasForeignKey("StatusId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired()
                        .HasConstraintName("fk_indicator_histories_statuses_status_id");

                    b.Navigation("Indicator");

                    b.Navigation("Status");
                });

            modelBuilder.Entity("TmbControl.Modules.Indicators.Entities.Category", b =>
                {
                    b.Navigation("Indicators");
                });

            modelBuilder.Entity("TmbControl.Modules.Indicators.Entities.Frequency", b =>
                {
                    b.Navigation("Indicators");
                });

            modelBuilder.Entity("TmbControl.Modules.Indicators.Entities.Indicator", b =>
                {
                    b.Navigation("Histories");
                });

            modelBuilder.Entity("TmbControl.Modules.Indicators.Entities.Status", b =>
                {
                    b.Navigation("Indicators");
                });
#pragma warning restore 612, 618
        }
    }
}
