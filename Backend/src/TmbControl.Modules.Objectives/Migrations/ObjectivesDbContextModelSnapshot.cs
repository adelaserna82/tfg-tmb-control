// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;
using TmbControl.Modules.Objectives.Persistence;

#nullable disable

namespace TmbControl.Modules.Objectives.Migrations
{
    [DbContext(typeof(ObjectivesDbContext))]
    partial class ObjectivesDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasDefaultSchema("objectives")
                .HasAnnotation("ProductVersion", "8.0.4")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("TmbControl.Modules.Objectives.Entities.ActionPlan", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<Guid>("AreaId")
                        .HasColumnType("uuid")
                        .HasColumnName("area_id");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_at");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("created_by");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("description");

                    b.Property<DateOnly>("FinisIn")
                        .HasColumnType("date")
                        .HasColumnName("finis_in");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("name");

                    b.Property<Guid>("ObjectiveId")
                        .HasColumnType("uuid")
                        .HasColumnName("objective_id");

                    b.Property<int>("Order")
                        .HasColumnType("integer")
                        .HasColumnName("order");

                    b.Property<DateOnly>("StartIn")
                        .HasColumnType("date")
                        .HasColumnName("start_in");

                    b.Property<int>("StatusId")
                        .HasColumnType("integer")
                        .HasColumnName("status_id");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("updated_at");

                    b.Property<string>("UpdatedBy")
                        .HasColumnType("text")
                        .HasColumnName("updated_by");

                    b.Property<int>("Year")
                        .HasColumnType("integer")
                        .HasColumnName("year");

                    b.HasKey("Id")
                        .HasName("pk_action_plans");

                    b.HasIndex("AreaId")
                        .HasDatabaseName("ix_action_plans_area_id");

                    b.HasIndex("ObjectiveId")
                        .HasDatabaseName("ix_action_plans_objective_id");

                    b.HasIndex("StatusId")
                        .HasDatabaseName("ix_action_plans_status_id");

                    b.ToTable("action_plans", "objectives");
                });

            modelBuilder.Entity("TmbControl.Modules.Objectives.Entities.Area", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_at");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("created_by");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("description");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("name");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("updated_at");

                    b.Property<string>("UpdatedBy")
                        .HasColumnType("text")
                        .HasColumnName("updated_by");

                    b.HasKey("Id")
                        .HasName("pk_areas");

                    b.ToTable("areas", "objectives");
                });

            modelBuilder.Entity("TmbControl.Modules.Objectives.Entities.Objective", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_at");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("created_by");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("description");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("name");

                    b.Property<int?>("StatusId")
                        .HasColumnType("integer")
                        .HasColumnName("status_id");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("updated_at");

                    b.Property<string>("UpdatedBy")
                        .HasColumnType("text")
                        .HasColumnName("updated_by");

                    b.HasKey("Id")
                        .HasName("pk_objectives");

                    b.HasIndex("StatusId")
                        .HasDatabaseName("ix_objectives_status_id");

                    b.ToTable("objectives", "objectives");
                });

            modelBuilder.Entity("TmbControl.Modules.Objectives.Entities.Status", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("name");

                    b.HasKey("Id")
                        .HasName("pk_statuses");

                    b.ToTable("statuses", "objectives");
                });

            modelBuilder.Entity("TmbControl.Modules.Objectives.Entities.ActionPlan", b =>
                {
                    b.HasOne("TmbControl.Modules.Objectives.Entities.Area", "Area")
                        .WithMany("ActionPlans")
                        .HasForeignKey("AreaId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired()
                        .HasConstraintName("fk_action_plans_areas_area_id");

                    b.HasOne("TmbControl.Modules.Objectives.Entities.Objective", "Objective")
                        .WithMany("ActionPlans")
                        .HasForeignKey("ObjectiveId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired()
                        .HasConstraintName("fk_action_plans_objectives_objective_id");

                    b.HasOne("TmbControl.Modules.Objectives.Entities.Status", "Status")
                        .WithMany("ActionsPlans")
                        .HasForeignKey("StatusId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired()
                        .HasConstraintName("fk_action_plans_statuses_status_id");

                    b.Navigation("Area");

                    b.Navigation("Objective");

                    b.Navigation("Status");
                });

            modelBuilder.Entity("TmbControl.Modules.Objectives.Entities.Objective", b =>
                {
                    b.HasOne("TmbControl.Modules.Objectives.Entities.Status", null)
                        .WithMany("Objectives")
                        .HasForeignKey("StatusId")
                        .HasConstraintName("fk_objectives_statuses_status_id");
                });

            modelBuilder.Entity("TmbControl.Modules.Objectives.Entities.Area", b =>
                {
                    b.Navigation("ActionPlans");
                });

            modelBuilder.Entity("TmbControl.Modules.Objectives.Entities.Objective", b =>
                {
                    b.Navigation("ActionPlans");
                });

            modelBuilder.Entity("TmbControl.Modules.Objectives.Entities.Status", b =>
                {
                    b.Navigation("ActionsPlans");

                    b.Navigation("Objectives");
                });
#pragma warning restore 612, 618
        }
    }
}
